<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java  生成数据库表结构文档</title>
      <link href="/2019/03/24/Java%E4%B9%8B%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3/"/>
      <url>/2019/03/24/Java%E4%B9%8B%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-生成数据库表结构文档"><a href="#Java-生成数据库表结构文档" class="headerlink" title="Java  生成数据库表结构文档"></a>Java  生成数据库表结构文档</h2><h3 id="工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw-HikariCP实现生成数据库文档"><a href="#工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw-HikariCP实现生成数据库文档" class="headerlink" title="工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw+HikariCP实现生成数据库文档"></a>工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw+HikariCP实现生成数据库文档</h3><h5 id="Mysql数据库生成："><a href="#Mysql数据库生成：" class="headerlink" title="Mysql数据库生成："></a>Mysql数据库生成：</h5><p>引入依赖包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;!-- Screw Core --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;screw-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">1.0</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- HikariCP --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.4</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- Mysql Driver --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">8.0</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 数据源</span><br><span class="line">HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">hikariConfig.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">hikariConfig.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/test01?serverTimezone=UTC&quot;);</span><br><span class="line">hikariConfig.setUsername(&quot;root&quot;);</span><br><span class="line">hikariConfig.setPassword(&quot;123456&quot;);</span><br><span class="line">// 设置可以获取tables remarks信息</span><br><span class="line">hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">hikariConfig.setMinimumIdle(2);</span><br><span class="line">hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">// 1、生成文件配置</span><br><span class="line">EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">      // 生成文件路径</span><br><span class="line">      .fileOutputDir(&quot;D://11&quot;)</span><br><span class="line">      // 打开目录</span><br><span class="line">      .openOutputDir(false)</span><br><span class="line">      // 文件类型   EngineFileType.DOC</span><br><span class="line">      .fileType(EngineFileType.HTML)</span><br><span class="line">      // 生成模板实现</span><br><span class="line">      .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"></span><br><span class="line">// 忽略表名</span><br><span class="line">List&lt;String&gt; ignoreTableName = Arrays.asList(&quot;test&quot;);</span><br><span class="line">// 忽略表前缀</span><br><span class="line">List&lt;String&gt; ignorePrefix = Arrays.asList(&quot;_a&quot;, &quot;a&quot;);</span><br><span class="line">// 忽略表后缀</span><br><span class="line">List&lt;String&gt; ignoreSuffix = Arrays.asList(&quot;_bak&quot;, &quot;bak&quot;);</span><br><span class="line"></span><br><span class="line">// 2、配置想要忽略的表</span><br><span class="line">ProcessConfig processConfig = ProcessConfig.builder().ignoreTableName(ignoreTableName)</span><br><span class="line">      .ignoreTablePrefix(ignorePrefix).ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line"></span><br><span class="line">// 3、生成文档配置（包含以下自定义版本号、描述等配置连接）</span><br><span class="line">Configuration config = Configuration.builder().version(&quot;1.0.0&quot;).description(&quot;数据库文档&quot;).dataSource(dataSource)</span><br><span class="line">      .engineConfig(engineConfig).produceConfig(processConfig).build();</span><br><span class="line"></span><br><span class="line">// 4、执行生成</span><br><span class="line">new DocumentationExecute(config).execute();</span><br></pre></td></tr></table></figure><blockquote><p>注：新版mysql驱动url后面需要加?serverTimezone&#x3D;UTC</p><p>否则会报：Failed to initialize pool: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the ‘serverTimezone’ configuration property)<br> to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><h4 id="Oracle数据库生成："><a href="#Oracle数据库生成：" class="headerlink" title="Oracle数据库生成："></a><strong>Oracle数据库生成：</strong></h4><blockquote><p>注意jdk8对应驱动  ojdbc8</p><p>相关依赖 orai18n 防止乱码</p></blockquote><p>注意以下依赖</p> <dependency>      <groupId>com.oracle.database.jdbc</groupId>      <artifactId>ojdbc8</artifactId>      <version>21.3.0.0</version>   </dependency> <dependency>      <groupId>cn.easyproject</groupId>      <artifactId>orai18n</artifactId>      <version>12.1.0.2.0</version>   </dependency><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 数据源</span><br><span class="line">HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">hikariConfig.setDriverClassName(&quot;oracle.jdbc.Driver&quot;);</span><br><span class="line">hikariConfig.setJdbcUrl(&quot;jdbc:oracle:thin:@172.0.0.1:1521:test&quot;);</span><br><span class="line">hikariConfig.setUsername(&quot;zhangsan&quot;);</span><br><span class="line">hikariConfig.setPassword(&quot;asdf2151#415&quot;);</span><br><span class="line">// 设置可以获取tables remarks信息</span><br><span class="line">hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">hikariConfig.setMinimumIdle(2);</span><br><span class="line">hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">// 1、生成文件配置</span><br><span class="line">EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">      // 生成文件路径</span><br><span class="line">      .fileOutputDir(&quot;D:\\test01&quot;)</span><br><span class="line">      // 打开目录</span><br><span class="line">      .openOutputDir(false)</span><br><span class="line">      // 文件类型</span><br><span class="line">      .fileType(EngineFileType.HTML)</span><br><span class="line">      // 生成模板实现</span><br><span class="line">      .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"></span><br><span class="line">// 忽略表名</span><br><span class="line">List&lt;String&gt; ignoreTableName = Arrays.asList(&quot;test&quot;);</span><br><span class="line">// 忽略表前缀</span><br><span class="line">List&lt;String&gt; ignorePrefix = Arrays.asList(&quot;test_&quot;, &quot;test&quot;);</span><br><span class="line">// 忽略表后缀</span><br><span class="line">List&lt;String&gt; ignoreSuffix = Arrays.asList(&quot;_bak&quot;, &quot;_tmp&quot;);</span><br><span class="line"></span><br><span class="line">// 2、配置想要忽略的表</span><br><span class="line">ProcessConfig processConfig = ProcessConfig.builder().ignoreTableName(ignoreTableName)</span><br><span class="line">      .ignoreTablePrefix(ignorePrefix).ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line"></span><br><span class="line">// 3、生成文档配置</span><br><span class="line">Configuration config = Configuration.builder().version(&quot;1.0.0&quot;).description(&quot;数据库文档&quot;).dataSource(dataSource)</span><br><span class="line">      .engineConfig(engineConfig).produceConfig(processConfig).build();</span><br><span class="line"></span><br><span class="line">// 4、执行生成</span><br><span class="line">new DocumentationExecute(config).execute();</span><br></pre></td></tr></table></figure><p>执行后生成html文档部分如下 ：</p><p><strong>表名：sys_log</strong></p><p>说明：日志表</p><p>数据列：</p><table><thead><tr><th>序号</th><th>名称</th><th>数据类型</th><th>长度</th><th>小数位</th><th>允许空值</th><th>主键</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>bigint</td><td>19</td><td>0</td><td>N</td><td>Y</td><td></td><td>ID</td></tr><tr><td>2</td><td>log_type</td><td>varchar</td><td>50</td><td>0</td><td>N</td><td>N</td><td></td><td>日志类型</td></tr><tr><td>3</td><td>create_user_code</td><td>varchar</td><td>64</td><td>0</td><td>N</td><td>N</td><td></td><td>创建用户编码</td></tr><tr><td>4</td><td>create_user_name</td><td>varchar</td><td>100</td><td>0</td><td>N</td><td>N</td><td></td><td>创建用户名称</td></tr><tr><td>5</td><td>create_date</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>创建时间</td></tr><tr><td>6</td><td>request_uri</td><td>varchar</td><td>500</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求URI</td></tr><tr><td>7</td><td>request_method</td><td>varchar</td><td>10</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求方式</td></tr><tr><td>8</td><td>request_params</td><td>text</td><td>65535</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求参数</td></tr><tr><td>9</td><td>request_ip</td><td>varchar</td><td>20</td><td>0</td><td>N</td><td>N</td><td></td><td>请求IP</td></tr><tr><td>10</td><td>server_address</td><td>varchar</td><td>50</td><td>0</td><td>N</td><td>N</td><td></td><td>请求服务器地址</td></tr><tr><td>11</td><td>is_exception</td><td>char</td><td>1</td><td>0</td><td>Y</td><td>N</td><td></td><td>是否异常</td></tr><tr><td>12</td><td>exception_info</td><td>text</td><td>65535</td><td>0</td><td>Y</td><td>N</td><td></td><td>异常信息</td></tr><tr><td>13</td><td>start_time</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>开始时间</td></tr><tr><td>14</td><td>end_time</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>结束时间</td></tr><tr><td>15</td><td>execute_time</td><td>int</td><td>10</td><td>0</td><td>Y</td><td>N</td><td></td><td>执行时间</td></tr><tr><td>16</td><td>user_agent</td><td>varchar</td><td>500</td><td>0</td><td>Y</td><td>N</td><td></td><td>用户代理</td></tr><tr><td>17</td><td>device_name</td><td>varchar</td><td>100</td><td>0</td><td>Y</td><td>N</td><td></td><td>操作系统</td></tr><tr><td>18</td><td>browser_name</td><td>varchar</td><td>100</td><td>0</td><td>Y</td><td>N</td><td></td><td>浏览器名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Stream流式处理集合-去重排序分组转换操作</title>
      <link href="/2019/03/21/Java%E4%B9%8BStream%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88-%E5%8E%BB%E9%87%8D%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/21/Java%E4%B9%8BStream%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88-%E5%8E%BB%E9%87%8D%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Stream流式处理集合-去重排序分组转换操作"><a href="#Java-Stream流式处理集合-去重排序分组转换操作" class="headerlink" title="Java Stream流式处理集合  去重排序分组转换操作"></a>Java Stream流式处理集合  去重排序分组转换操作</h2><p> 工作中Stream流操作集合 很方便快捷，以下是记录常用的去重排序分组转换操作 </p><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><p>1.首先使用Integer 和String 类型集合 进行操作 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两组数据类型集合</span></span><br><span class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">12</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">List&lt;String&gt; strs = Arrays.asList(<span class="string">&quot;12&quot;</span>, <span class="string">&quot;23&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据去重</span></span><br><span class="line">integers.stream().distinct().forEach(System.out::println);</span><br><span class="line">strs.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据排序 默认正序</span></span><br><span class="line">integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"> strs.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒叙写法</span></span><br><span class="line"> integers.stream().sorted(Comparator.comparingInt(x-&gt;-x)).forEach(System.out::println);</span><br><span class="line"><span class="comment">//integers.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);</span></span><br><span class="line"> strs.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>2.定义实体Person及组装数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chensan&quot;</span>, <span class="number">25</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhaosi&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhaosi&quot;</span>, <span class="number">40</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;liuliu&quot;</span>, <span class="number">22</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">23</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按名字去重后展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Person::getName)))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)</p></blockquote><p>按名字 年龄去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(x -&gt; String.join(<span class="string">&quot;-&quot;</span>, x.getName(), String.valueOf(x.getAge())))))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><p>按名字 年龄 性别去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(x -&gt; String.join(<span class="string">&quot;-&quot;</span>, x.getName(), String.valueOf(x.getAge()), x.getSex()))))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>根据年龄排序 再根据名字排序 从小到大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge).thenComparing(Person::getName)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><p>根据年龄排序 再根据名字排序 从大到小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.reverseOrder())).forEach(System.out::println);</span><br><span class="line"><span class="comment">//list.stream().sorted(Comparator.comparing(Person::getAge).reversed()).forEach(System.out::println);</span></span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)</p></blockquote><p>当存在字段为null时，执行会报空指针异常，此时可用Comparator.nullsLast 或Comparator.nullsFirst 比较器 将null值数据放到最前或最后</p><p>如：添加 一组年龄为空的数据</p><blockquote><p>list.add(new Person(“ben”, null, “女”));</p></blockquote><p>根据年龄排序  存在age字段为空时 ，null值排在最前面 后根据age倒序展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Collections.reverseOrder()))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;ben, age&#x3D;null, sex&#x3D;女)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)</p></blockquote><p>根据年龄排序  存在age字段为空时 ，null值排在最后面 后根据age倒序展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.nullsLast(Collections.reverseOrder()))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;ben, age&#x3D;null, sex&#x3D;女)</p></blockquote><p>获取年龄最大的人的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(list.stream().max(Comparator.comparing(Person::getAge)).orElse(<span class="keyword">new</span> <span class="title class_">Person</span>()).getName());</span><br></pre></td></tr></table></figure><h4 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h4><p>根据名字_性别 分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(x-&gt;x.getName()+&quot;_&quot;+x.getSex())).forEach((x,y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>lisi_男&#x3D;[Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)]<br>liuliu_女&#x3D;[Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)]<br>chensan_男&#x3D;[Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)]<br>zhaosi_男&#x3D;[Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男), Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)]<br>lisi_女&#x3D;[Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女), Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)]<br>zhangsan_男&#x3D;[Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)]</p></blockquote><p>根据姓名 统计数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(Person::getName,Collectors.counting())).forEach((x, y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;1<br>lisi&#x3D;3<br>zhaosi&#x3D;2<br>zhangsan&#x3D;1<br>liuliu&#x3D;1</p></blockquote><p>根据名字分组 统计年龄总和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(Person::getName, Collectors.summingInt(Person::getAge))).forEach((x,y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;25<br>lisi&#x3D;69<br>zhaosi&#x3D;62<br>zhangsan&#x3D;20<br>liuliu&#x3D;22</p></blockquote><h4 id="转换Map"><a href="#转换Map" class="headerlink" title="转换Map"></a>转换Map</h4><p>按名字作为键  值为年龄最大的 转换成Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName,Function.identity(), BinaryOperator.maxBy(Comparator.comparing(Person::getAge)))).forEach((x,y)-&gt;</span><br><span class="line">                System.out.println(x+&quot;=&quot;+y)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>lisi&#x3D;Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>zhaosi&#x3D;Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>zhangsan&#x3D;Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>liuliu&#x3D;Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)</p></blockquote><p>按名字作为键 值为性别以分号追加展示  转换成Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName, Person::getSex, (m, n) -&gt; m + &quot;;&quot; + n)).forEach((x, y) -&gt; System.out.println(x + &quot;=&quot; + y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;男<br>lisi&#x3D;男;女;女<br>zhaosi&#x3D;男;男<br>zhangsan&#x3D;男<br>liuliu&#x3D;女</p></blockquote><p>注：如果使用两个参数的toMap方法时，若存在键重复时会报 “ Duplicate key ” 错 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName, Person::getSex)).forEach((x, y) -&gt; System.out.println(x + &quot;=&quot; + y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Exception in thread “main” java.lang.IllegalStateException: Duplicate key zhaosi (attempted merging values 男 and 男)<br>    at java.base&#x2F;java.util.stream.Collectors.duplicateKeyException(Collectors.java:133)<br>    at java.base&#x2F;java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:180)<br>    at java.base&#x2F;java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)<br>    at java.base&#x2F;java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)<br>    at java.base&#x2F;java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br>    at java.base&#x2F;java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)</p></blockquote><h3 id="Java8相关资料参考文档："><a href="#Java8相关资料参考文档：" class="headerlink" title="Java8相关资料参考文档："></a>Java8相关资料参考文档：</h3><p>Java 8 教程汇总 <a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html">https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</a></p><p>Java8简明教程 <a href="https://wizardforcel.gitbooks.io/modern-java">https://wizardforcel.gitbooks.io/modern-java</a></p><p>Java8新特性探究 <a href="https://wizardforcel.gitbooks.io/java8-new-features/content/">https://wizardforcel.gitbooks.io/java8-new-features/content/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用HtmlUnit 爬取网站壁纸资源</title>
      <link href="/2019/03/15/%E4%BD%BF%E7%94%A8HtmlUnit%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%A3%81%E7%BA%B8/"/>
      <url>/2019/03/15/%E4%BD%BF%E7%94%A8HtmlUnit%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="HtmlUnit-爬取网站壁纸资源"><a href="#HtmlUnit-爬取网站壁纸资源" class="headerlink" title="HtmlUnit 爬取网站壁纸资源"></a>HtmlUnit 爬取网站壁纸资源</h2><p><em>当你想一些资源又无从找时，那么就可以在别人网中爬取。OωO</em></p><p><strong>HtmlUnit 官方简介：</strong></p><blockquote><p>HtmlUnit 是“Java 程序的无 GUI 浏览器”。它对 HTML 文档进行建模并提供一个 API，允许您调用页面、填写表单、单击链接等……就像您在“普通”浏览器中所做的一样。</p><p>它具有相当好的 JavaScript 支持（不断改进），甚至能够使用相当复杂的 AJAX 库，根据使用的配置模拟 Chrome、Firefox 或 Internet Explorer。</p><p>它通常用于测试目的或从网站检索信息。</p></blockquote><p>总之  htmlunit可以模拟浏览器执行，不会正真打开一个浏览器界面，是<a href="https://so.csdn.net/so/search?q=webdriver&spm=1001.2101.3001.7020">webdriver</a>的轻量级实现。 可用于获取网站信息。</p><p>相比其他java中支持爬虫的框架（WebMagic、Spider、Jsoup），HtmlUnit运行速度快，操作元素API丰富。<a href="https://htmlunit.sourceforge.io/apidocs/index.html">官方API文档</a></p><h4 id="爬取乌云高清壁纸站-风景壁纸类壁纸"><a href="#爬取乌云高清壁纸站-风景壁纸类壁纸" class="headerlink" title="爬取乌云高清壁纸站 风景壁纸类壁纸"></a>爬取乌云高清壁纸站 <em>风景壁纸</em>类壁纸</h4><p>1.创建WebClient浏览器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造创建 默认使用谷歌浏览器</span></span><br><span class="line"> <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> public WebClient() {<br>        this(BrowserVersion.getDefault());<br>    }</p><p> &#x2F;** Latest Chrome. *&#x2F;<br>    public static final BrowserVersion CHROME &#x3D; new BrowserVersion(103, “Chrome”);</p></blockquote><p>2.浏览器设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置支持AJAX</span></span><br><span class="line">        webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">        <span class="comment">////开启页面重定向</span></span><br><span class="line">        webClient.getOptions().setRedirectEnabled(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//关闭ssl安全访问</span></span><br><span class="line">        webClient.getOptions().setUseInsecureSSL(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//关闭异常抛出</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//忽略解析 css js false</span></span><br><span class="line">        webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置是否允许本机 ActiveX。默认值为假。请注意，除非您完全信任 JavaScript 代码，否则绝不应该允许运行本机 ActiveX 组件，因为它不受 Java 虚拟机控制</span></span><br><span class="line">        webClient.getOptions().setActiveXNative(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取HtmlPage信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String baseUrl = &quot;https://www.obzhi.com/category/fengjingbizhi&quot;;  </span></span><br><span class="line">page = webClient.getPage(baseUrl);</span><br></pre></td></tr></table></figure><p>4.从浏览器网站页面F12 获取图像元素定位，获取HtmlImage集合对象</p><p>以下使用xpath 语法获取，具体可参考<a href="https://www.runoob.com/xpath/xpath-syntax.html">xpath语法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;HtmlImage&gt; l=  page.getByXPath(<span class="string">&quot;//div[@class=&#x27;thumbnail&#x27;]/a/img&quot;</span>);</span><br></pre></td></tr></table></figure><p>5.遍历截取图片路径信息及下载本地</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (HtmlImage image : l) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> StringUtils.substringAfterLast(image.getSrcAttribute(), <span class="string">&quot;src=&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">douwnUrl</span> <span class="operator">=</span> StringUtils.substringBefore(sub, <span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;http:&quot;</span>, <span class="string">&quot;https:&quot;</span>);</span><br><span class="line">    System.out.println(douwnUrl);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"> HttpUtil.download(douwnUrl, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://obzhi//&quot;</span> +StringUtils.substringAfterLast(douwnUrl,<span class="string">&quot;/&quot;</span>)), <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打印获取url路径示例:</p><blockquote><p><a href="https://www.obzhi.com/wp-content/uploads/2016/09/yujia.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/yujia.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/huanghun.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/huanghun.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/dahaichonglang.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/dahaichonglang.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/haibianbieshu.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/haibianbieshu.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/senlindahai.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/senlindahai.jpg</a></p><p>……</p></blockquote><p><strong>注：部分url 地址需 https:才能访问 所以这里全替换成https:了</strong></p><p>6.完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line">webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">webClient.getOptions().setRedirectEnabled(<span class="literal">true</span>);</span><br><span class="line">webClient.getOptions().setUseInsecureSSL(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setActiveXNative(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//obzhi</span></span><br><span class="line"><span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.obzhi.com/category/fengjingbizhi&quot;</span>;</span><br><span class="line">HtmlPage page;</span><br><span class="line"><span class="comment">//尾页数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">endPage</span> <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; endPage; i++) &#123;</span><br><span class="line">   baseUrl= i&gt;<span class="number">1</span> ? baseUrl.concat(<span class="string">&quot;//page/&quot;</span>) + i : baseUrl;</span><br><span class="line">    page = webClient.getPage(baseUrl);</span><br><span class="line">    List&lt;HtmlImage&gt; l=  page.getByXPath(<span class="string">&quot;//div[@class=&#x27;thumbnail&#x27;]/a/img&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (HtmlImage image : l) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> StringUtils.substringAfterLast(image.getSrcAttribute(), <span class="string">&quot;src=&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">douwnUrl</span> <span class="operator">=</span> StringUtils.substringBefore(sub, <span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;http:&quot;</span>, <span class="string">&quot;https:&quot;</span>);</span><br><span class="line">        System.out.println(douwnUrl);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">     HttpUtil.download(douwnUrl, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://obzhi//&quot;</span> +StringUtils.substringAfterLast(douwnUrl,<span class="string">&quot;/&quot;</span>)), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HtmlUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HtmlUnit </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 菲波那切数列之递归迭代算法求值</title>
      <link href="/2018/09/24/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E6%B1%82%E8%8F%B2%E6%B3%A2%E9%82%A3%E5%88%87%E6%95%B0%E5%88%97%E5%80%BC/"/>
      <url>/2018/09/24/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E6%B1%82%E8%8F%B2%E6%B3%A2%E9%82%A3%E5%88%87%E6%95%B0%E5%88%97%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55-、……"><a href="#斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55-、……" class="headerlink" title="斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55 、……"></a>斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55 、……</h2><h3 id="数列从第3项开始，每一项都等于前两项之和。"><a href="#数列从第3项开始，每一项都等于前两项之和。" class="headerlink" title="数列从第3项开始，每一项都等于前两项之和。"></a><code>数列从第3项开始，每一项都等于前两项之和。</code></h3><p>求该数列的第N项数值</p><h4 id="1-递归方法"><a href="#1-递归方法" class="headerlink" title="1.递归方法"></a>1.递归方法</h4><p>递归重要的规则：当满足一定条件时 需要终止递归调用。否则陷入调用死循环</p><p>此数列 当x&#x3D;1 或 x&#x3D;2 时 可以当做满足 跳出递归条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//x 表示第几个数</span><br><span class="line">f(x)=f(x-1)+f(x-2) </span><br><span class="line">f(x-1)=f(x-2)+f(x-3)</span><br><span class="line">f(x-2)=f(x-3)+f(x-4)</span><br><span class="line">......</span><br><span class="line">当x-n=1 或 2时 直接返回1</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">publix <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">t1</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span> || x == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t1(x - <span class="number">1</span>) + t1(x - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-迭代方法"><a href="#2-迭代方法" class="headerlink" title="2.迭代方法"></a>2.迭代方法</h4><p>如：</p><p>1 1 2 3 5 8  m n  result&#x3D;m+n<br>1  result &#x3D;  m+n &#x3D; 0+1  可以看做 0 + 1<br>2 result &#x3D;  m+n &#x3D; 1+1<br>3 result&#x3D; m+n 1+2<br>5 result &#x3D;m+n 2+3<br>8 result &#x3D; m+ n 3+5<br>…..</p><blockquote><p> 可以看出 当前组数m的值 是上一组数的n;上一组数的 result 是下一组数的n</p></blockquote><p>即 如果result代表当前项的斐波那契数，m代表前两项的，n代表前一项，我们在每一次计算完后将n的值赋给m，<br>将result的值赋给n，使得我们可以一项一项的算出斐波那契数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">publix <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">t2</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> result=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line"> <span class="comment">//count 1 开始 ，1 时 不进循环 直接返回1</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; x) &#123;</span><br><span class="line"></span><br><span class="line">    result = m+n;</span><br><span class="line">    m = n;</span><br><span class="line">   n = result;</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效率比较：</p><p>递归效率慢  它会消耗了大量的内存与时间，当参数值过大时， 会计算很长的时间</p><p>迭代求值效率快 </p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StopWatch</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">time.start(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">System.out.println(t1(<span class="number">20</span>));</span><br><span class="line">time.stop();</span><br><span class="line">time.start(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">System.out.println(t2(<span class="number">20</span>));</span><br><span class="line">time.stop();</span><br><span class="line">System.out.println(time.prettyPrint());</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>6765<br>6765<br>StopWatch ‘’: running time &#x3D; 489800 ns</p><hr><h2 id="ns-Task-name"><a href="#ns-Task-name" class="headerlink" title="ns         %     Task name"></a>ns         %     Task name</h2><p>000463500  095%  t1<br>000026300  005%  t2</p></blockquote><p>结果纳秒统计 效率 t2迭代方法 比t1递归快的多</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令(二)</title>
      <link href="/2018/09/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/"/>
      <url>/2018/09/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h4 id="du查看文件和目录占用的磁盘大小"><a href="#du查看文件和目录占用的磁盘大小" class="headerlink" title="du查看文件和目录占用的磁盘大小"></a>du查看文件和目录占用的磁盘大小</h4><blockquote><p>du : disk usage 磁盘占用情况</p></blockquote><p>命令： du 目录或文件 显示目录下每个子目录的磁盘使用情况</p><p>查看&#x2F;home 各目录文件内存大小</p><p>du -ah &#x2F;home</p><blockquote><p>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla&#x2F;extensions<br>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla&#x2F;plugins<br>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bash_logout<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bash_profile<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bashrc<br>……<br>0    &#x2F;home&#x2F;kejiu&#x2F;.config<br>4.0K    &#x2F;home&#x2F;kejiu&#x2F;.bash_history<br>20K    &#x2F;home&#x2F;kejiu<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla&#x2F;extensions<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla&#x2F;plugins<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bash_logout<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bash_profile<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bashrc<br>12K    &#x2F;home&#x2F;xingxing<br>60K    &#x2F;home</p></blockquote><p>-h 以较为容易阅读方式格式显示 如： ls -lh </p><p>-a 不仅查看子目录大小 还包括文件</p><p>-c 显示所有文件和子目录大小后 显示总和</p><p>-s 只显示总和</p><p>–max-depth&#x3D;n  子目录深度第n层</p><p>只显示&#x2F;root 下占用大小</p><p>du -sh &#x2F;root</p><blockquote><p>94M    &#x2F;root</p></blockquote><h4 id="df-查看磁盘空间使用情况"><a href="#df-查看磁盘空间使用情况" class="headerlink" title="df 查看磁盘空间使用情况"></a>df 查看磁盘空间使用情况</h4><p>命令： df -h</p><p>打印输出：</p><blockquote><p>文件系统        容量  已用  可用 已用% 挂载点<br>devtmpfs        2.0G     0  2.0G    0% &#x2F;dev<br>tmpfs           2.0G     0  2.0G    0% &#x2F;dev&#x2F;shm<br>tmpfs           2.0G   21M  1.9G    2% &#x2F;run<br>tmpfs           2.0G     0  2.0G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>&#x2F;dev&#x2F;sda3        25G  8.2G   17G   33% &#x2F;<br>&#x2F;dev&#x2F;sda1      1014M  169M  846M   17% &#x2F;boot<br>tmpfs           394M   36K  394M    1% &#x2F;run&#x2F;user&#x2F;0</p></blockquote><h4 id="lsblk-查看设备挂载情况"><a href="#lsblk-查看设备挂载情况" class="headerlink" title="lsblk 查看设备挂载情况"></a>lsblk 查看设备挂载情况</h4><p>-f 查看设备挂载详细信息</p><p>命令： lsblk </p><p>打印输出：</p><blockquote><p>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   30G  0 disk<br>├─sda1   8:1    0    1G  0 part &#x2F;boot<br>├─sda2   8:2    0    4G  0 part [SWAP]<br>└─sda3   8:3    0   25G  0 part &#x2F;<br>sr0     11:0    1  4.4G  0 rom  </p></blockquote><h4 id="systemctl-CentOS7版本"><a href="#systemctl-CentOS7版本" class="headerlink" title="systemctl (CentOS7版本)"></a>systemctl (CentOS7版本)</h4><p>命令： systemctl start | stop | restart| status 服务名</p><p>查看服务方法 ： cd  &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system   </p><p>ls -al</p><h4 id="ps查看当前服务进程"><a href="#ps查看当前服务进程" class="headerlink" title="ps查看当前服务进程"></a>ps查看当前服务进程</h4><p>ps aux | grep xxx  查看系统中所有进程</p><p>ps -ef |grep xxx 查看子父进程之间的关系</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>列出带有终端的所有用户进程</td></tr><tr><td>x</td><td>列出当前用户的所有进程，包括没有终端的进程</td></tr><tr><td>u</td><td>面向友好展示</td></tr><tr><td>-e</td><td>列出所有进程</td></tr><tr><td>-f</td><td>显示完整格式的进程列表</td></tr><tr><td>-u</td><td>列出某个用户关联的所有进程</td></tr></tbody></table><p>查看远程登陆进程</p><p>ps -ef | grep sshd</p><h4 id="kill终止进程"><a href="#kill终止进程" class="headerlink" title="kill终止进程"></a>kill终止进程</h4><p>kill 进程号</p><p>kill -l </p><p>-9  强迫进程立刻停止 (SIGKILL)</p><p>强制终止PID为9834的进程</p><p>命令： kill -9 9834 </p><p>终止所有tomcat相关进程</p><p>killall  tomcat</p><h4 id="top实时监控系统进程状态"><a href="#top实时监控系统进程状态" class="headerlink" title="top实时监控系统进程状态"></a>top实时监控系统进程状态</h4><p>top 参数</p><p>-d 每隔几秒更新 默认三秒</p><p>-i 不显示任何闲置或僵死进程</p><p>-p 通过指定PID 查看对应进程</p><p> top -p 5854 查看PID 5854</p><blockquote><p>按k键 可以kill 对应pid   (9)</p></blockquote><h4 id="netstat-显示网络状态和端口占用信息"><a href="#netstat-显示网络状态和端口占用信息" class="headerlink" title="netstat 显示网络状态和端口占用信息"></a>netstat 显示网络状态和端口占用信息</h4><p>netstat -anp | grep 进程号 查看该进程网络信息</p><p>netstat -nlp | grep 端口号 查看网络端口占用情况</p><p>查看3306端口是否被占用</p><blockquote><p> netstat -nlp |grep 3306</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有正在监听和未监听的套接字</td></tr><tr><td>-n</td><td>拒接显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出在监听的服务状态</td></tr><tr><td>-p</td><td>显示哪个进程在调用</td></tr></tbody></table><h4 id="RPM软件包管理命令"><a href="#RPM软件包管理命令" class="headerlink" title="RPM软件包管理命令"></a>RPM软件包管理命令</h4><p>1.rpm 查询</p><p>rmp -qa 查询所安装的所有rpm软件包</p><p>例：查询 firefox 软件安装</p><blockquote><p>  rpm -qa |grep firefox</p></blockquote><p>2.rpm 卸载</p><p>rpm -e RPM软件包</p><p>rpm -e –nodeps RPM 软件包  –nodeps 卸载前不检查依赖</p><p>例：卸载firefox</p><blockquote><p>rpm -e firefox</p></blockquote><p>3.rpm安装</p><p>例：安装firefox</p><blockquote><p>rpm -ivh firefox</p></blockquote><p>-i 安装</p><p>-v 显示详细信息</p><p>-h 进度条</p><p>–nodeps 安装前不检查依赖</p><h4 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h4><p>yum基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次性安装所有依赖的软件包</p><blockquote><p>类似于maven</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期缓存（类似mvn clean）</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><p>1.查找可安装的firefox包</p><p>yum list | grep firefox</p><blockquote><p>firefox.x86_64                            68.10.0-1.el7.centos         @anaconda<br>firefox.i686                              91.12.0-2.el7.centos         updates<br>firefox.x86_64                            91.12.0-2.el7.centos         updates  </p></blockquote><p>第一个表示已安装版本 以下两个表示可更新版本</p><p>2.删除老版本firefox</p><p> yum remove firefox</p><p>3.安装Firefox</p><p>yum -y install firefox   </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令(一)</title>
      <link href="/2018/09/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/"/>
      <url>/2018/09/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h4 id="find-查找文件或目录命令"><a href="#find-查找文件或目录命令" class="headerlink" title="find 查找文件或目录命令"></a>find 查找文件或目录命令</h4><blockquote><p>find 命令将从指定目录你向下递归比哪里各个子目录 将满足的查询条件的文件显示出来</p></blockquote><ul><li><p>-name &lt;查询方式&gt; 命令：  </p><p>查找指定文件名</p><ol><li><p>find -name info  查找系统下所有info文件</p></li><li><p>find &#x2F;root -name 2.txt 查找root下 所有 2.txt文件</p></li><li><p>find &#x2F;root -name “*.exe*”  查找root下 所有 exe后缀文件</p></li><li></li></ol></li><li><p>-user &lt;用户名&gt; 命令：passwd kejiu</p><p>查找属于指定用户名所有文件</p><p>1.find &#x2F;home -user kejiu 查找kejiu用户下的文件</p></li><li><p>-size &lt;文件大小 &gt;命令：id kejiu</p><p>查找按照指定文件大小查找文件</p><p>1.find &#x2F;root -size +10M 查找root下10M以上文件</p></li></ul><h4 id="locate-查找文件路径"><a href="#locate-查找文件路径" class="headerlink" title="locate 查找文件路径"></a>locate 查找文件路径</h4><blockquote><p>locate命令 利用事先建立的系统中所有文件名称和路径的locate数据库实现快速查找文件，locate无需遍历整个文件系统，查询速度比较快。</p></blockquote><p>注意：为了保证查询文件结果的准确性，需要定期更新locate</p><p><code>updatedb</code></p><p>1.locate  java查找包含java的文件或路径名</p><p>例：</p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Europe&#x2F;Zaporozhye<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Europe&#x2F;Zurich<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Chagos<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Christmas<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Cocos<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Kerguelen<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;tnameserv-java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64.1.gz<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;unpack200-java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64.1.gz<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;pl&#x2F;man1&#x2F;javaws.1.gz<br>&#x2F;usr&#x2F;share&#x2F;maven-fragments&#x2F;javapackages-depmap.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java-keystore.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java-pack200.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;text&#x2F;x-java.xml</p></blockquote><h4 id="grep-过滤查找-“-”-管道符"><a href="#grep-过滤查找-“-”-管道符" class="headerlink" title="grep 过滤查找 “|” 管道符"></a>grep 过滤查找 “|” 管道符</h4><ol><li>-n  显示匹配行和行号</li></ol><p>命令： grep -n hello hello.txt  在hello.txt 中查找hello 显示内容及行号</p><ol start="2"><li>管道符 将前一个命令的处理结果传输给后面命令处理</li></ol><p>命令： 查找某文件在第几行 ls | grep -n hello</p><h4 id="压缩和解压命令"><a href="#压缩和解压命令" class="headerlink" title="压缩和解压命令"></a>压缩和解压命令</h4><p>1.gzip&#x2F;gunzip压缩</p><p>命令： gzip 压缩文件 （压缩文件或目录）</p><p>命令：gunzip 文件.gz （ 解压命令）</p><blockquote><p>注意：</p><p>只能压缩文件不能压缩目录</p><p>不保留原来的文件</p><p>同时多个文件压缩会产生多个压缩包</p></blockquote><p>2.zip&#x2F;unzip压缩</p><p>命令： zip 压缩文件 （只能将文件压缩成.gz文件）</p><p>命令：unzip 文件.zip （ 解压命令）</p><p>zip</p><p>-r 压缩目录</p><p><code>将/root目录下的文件 压缩成myroot.zip</code></p><p><code>zip -r myroot.zip /root</code></p><p>unzip</p><p>-d 指定压缩存放目录</p><p>将myroot.zip解压至&#x2F;etc目录下</p><p>unzip -d &#x2F;etc&#x2F; myroot.zip</p><p>3.tar打包</p><p>命令 tar [参数] xx.tar.gz  【文件】   (将文件打包压缩，压缩后的文件格式.tar.gz)</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p>将1.txt 2.txt 3.txt 文件 压缩成1.tar.gz</p><p>tar -zcvf 1.tar.gz 1.txt 2.txt 3.txt  </p><p>将1.tar.gz 解压至 &#x2F;home</p><p>tar -zxvf 1.tar.gz  -C &#x2F;home</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java LocalDate与Date相互转换</title>
      <link href="/2018/09/14/Java%E4%B9%8BLocalDate%E4%B8%8EDate%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/09/14/Java%E4%B9%8BLocalDate%E4%B8%8EDate%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="有时为了兼容-Date-类型需要进行转换。"><a href="#有时为了兼容-Date-类型需要进行转换。" class="headerlink" title="有时为了兼容 Date 类型需要进行转换。"></a>有时为了兼容 Date 类型需要进行转换。</h2><h3 id="工作中，有时为了兼容-Date-类型字段需要进行类型转换。"><a href="#工作中，有时为了兼容-Date-类型字段需要进行类型转换。" class="headerlink" title="工作中，有时为了兼容 Date 类型字段需要进行类型转换。"></a>工作中，有时为了兼容 Date 类型字段需要进行类型转换。</h3><blockquote><p>将LocalDate、LocalDateTime与Date之间相互转换方法记录一下：</p></blockquote><h5 id="LocalDateTime-转-Date类型"><a href="#LocalDateTime-转-Date类型" class="headerlink" title="LocalDateTime 转 Date类型"></a>LocalDateTime 转 Date类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static Date toDate(LocalDateTime localDateTime) &#123;</span><br><span class="line">    ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());</span><br><span class="line">    return Date.from(zonedDateTime.toInstant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LocalDate-转-Date-类型"><a href="#LocalDate-转-Date-类型" class="headerlink" title="LocalDate 转 Date 类型"></a>LocalDate 转 Date 类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static Date toDate(LocalDate localDate) &#123;</span><br><span class="line">    ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line">    return Date.from(localDate.atStartOfDay(zoneId).toInstant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注：LocalDate 会截去 时分秒数据</code></p><h5 id="Date-转-LocalDate"><a href="#Date-转-LocalDate" class="headerlink" title="Date 转 LocalDate"></a>Date 转 LocalDate</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDate toLocalDate(Date date) &#123;</span><br><span class="line">    Instant instant = date.toInstant();</span><br><span class="line">    return LocalDateTime.ofInstant(instant, ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Date-转LocalDateTime"><a href="#Date-转LocalDateTime" class="headerlink" title="Date 转LocalDateTime"></a>Date 转LocalDateTime</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime toLocalDateTime(Date date) &#123;</span><br><span class="line">    Instant instant = date.toInstant();</span><br><span class="line">    return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户文件权限管理</title>
      <link href="/2018/09/14/Linux%E4%B9%8B%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/14/Linux%E4%B9%8B%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="常用用户管理操作命令"><a href="#常用用户管理操作命令" class="headerlink" title="常用用户管理操作命令"></a>常用用户管理操作命令</h2><ul><li><p>新建用户 kejiu  命令： useradd kejiu</p></li><li><p>设置密码 命令：passwd kejiu</p></li><li><p>查找是否存在用户kejiu 命令：id kejiu</p></li><li><p>查看创建了哪些用户 命令: cat &#x2F;etc&#x2F;passwd (可在&#x2F;etc&#x2F;passwd文件内查看用户信息)</p></li><li><p>切换用户 命令：su 用户 </p></li><li><p>删除用户 命令：userdel  用户 （主目录不会被删除，需要删除的话 手动rm -rf  主目录名）或者 userdel -r ,多加个-r 参数 删除用户时会自动删除用户的主目录</p></li></ul><h3 id="临时获取root权限"><a href="#临时获取root权限" class="headerlink" title="临时获取root权限"></a>临时获取root权限</h3><p>  sudo</p><p>例： ls查看root用户下&#x2F;root文件* 提示无操作权限*</p><p>sudo ls</p><blockquote><p>提示：kejiu 不在 sudoers 文件中。此事将被报告。</p></blockquote><p>出现以上提示</p><p>需要使用root账户在 &#x2F;etc&#x2F;sudoers 文件中配置上可以sudo执行的用户信息</p><p>如在root ALL&#x3D;(ALL) ALL下添加kejiu 操作权限信息：</p><blockquote><p>Allow root to run any commands anywhere</p><p>root    ALL&#x3D;(ALL)     ALL</p><p><strong>kejiu    ALL&#x3D;(ALL)     ALL</strong></p></blockquote><h3 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h3><p>每一个用户都对应一个用户组，创建用户时 默认分配组名为自己</p><blockquote><p>uid&#x3D;1002(kejiu) gid&#x3D;1002(kejiu) 组&#x3D;1002(kejiu)</p></blockquote><p>用户组的操作是基于&#x2F;etc&#x2F;group文件的修改</p><ul><li><p>新增组 命令：groupadd 组名</p></li><li><p>删除组 命令：groupdel 组名</p></li><li><p>将用户kejiu 添加至haha  命令： usermod -g haha kejiu</p><p>id kejiu 查看当前用户信息 ，用户组已改变</p></li></ul><blockquote><p>uid&#x3D;1002(kejiu) gid&#x3D;1003(<strong>haha</strong>) 组&#x3D;1003(<strong>haha</strong>)</p></blockquote><ul><li><p>将用户组改名为group1 命令： groupmod -n group1  group1</p></li><li><p>所有在wheel组 内 可执行超级权限  （&#x2F;ect&#x2F;sudoers 以下内容）</p><blockquote><p> Allows people in group wheel to run all commands</p><p>%wheel    ALL&#x3D;(ALL)    ALL</p></blockquote></li></ul><h3 id="文件属性与权限"><a href="#文件属性与权限" class="headerlink" title="文件属性与权限"></a>文件属性与权限</h3><table><thead><tr><th>文件类型</th><th>属主权限 u</th><th>属组权限 g</th><th>其他用户权限 o</th></tr></thead><tbody><tr><td>0</td><td>1  2   3</td><td>4  5  6</td><td>7  8  9</td></tr><tr><td><strong>d</strong></td><td><strong>rwx</strong></td><td><strong>r-x</strong></td><td><strong>r-x</strong></td></tr><tr><td>目录文件</td><td>读 写 执行</td><td>读 写 执行</td><td>读 写 执行</td></tr></tbody></table><h4 id="首位数字解释"><a href="#首位数字解释" class="headerlink" title="首位数字解释"></a>首位数字解释</h4><ol><li><p>0 表示文件类型</p></li><li><p>-代表文件</p></li><li><p>d代表目录</p></li><li><p>l链接文档（link file）</p></li></ol><h4 id="rwx解释"><a href="#rwx解释" class="headerlink" title="rwx解释"></a>rwx解释</h4><ol><li><p>r :可以读取 查看</p></li><li><p>w:可以写入 修改 删除</p></li><li><p>x:可以执行 进入</p></li></ol><h4 id="文件权限修改"><a href="#文件权限修改" class="headerlink" title="文件权限修改"></a>文件权限修改</h4><ol><li><p>chmod (u g o ) (+-&#x3D;) 文件或目录  (u:所有者 g:所有组 o:其他人 a 所有人)</p><p>给 ugo 全部赋予此文件rw权限</p><p><code>  chmod a=rw startup.sh</code></p></li><li><p>chmod [421] 文件目录  （r&#x3D;4 w&#x3D;2 x&#x3D;1） rwx&#x3D;4+2+1&#x3D;7  </p><p>给 ugo 全部赋予此文件rwx权限  </p><p> <code>chmod 777 startup.sh</code></p></li></ol><table><thead><tr><th>u</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>rwx</td><td>rwx</td><td>rwx</td></tr><tr><td>110</td><td>100</td><td>100</td></tr><tr><td>6</td><td>4</td><td>4</td></tr></tbody></table><blockquote><p>二进制表示 110 100 100</p></blockquote><p>3.修改整个文件夹下所有文件 ugo权限 都有可读可写可执行权限</p><p><code>chmod -R 777 home/ </code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 打印两时间段所有日期方法</title>
      <link href="/2018/08/10/%E3%80%90Java%E3%80%91%E6%89%93%E5%8D%B0%E4%B8%A4%E6%97%B6%E9%97%B4%E6%AE%B5%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/10/%E3%80%90Java%E3%80%91%E6%89%93%E5%8D%B0%E4%B8%A4%E6%97%B6%E9%97%B4%E6%AE%B5%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="【Java】打印两时间段所有日期方法"><a href="#【Java】打印两时间段所有日期方法" class="headerlink" title="【Java】打印两时间段所有日期方法"></a>【Java】打印两时间段所有日期方法</h2><p><em>做Echarts图表统计时，需要用到近一周数据展示，X轴需用到两段时间日期时间显示</em></p><h4 id="打印两日期时间段中的所有日期显示"><a href="#打印两日期时间段中的所有日期显示" class="headerlink" title="打印两日期时间段中的所有日期显示"></a>打印两日期时间段中的所有日期显示</h4><p>1.首先使用传统Date与Calendar时间处理方式打印，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化输出 </span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2018-6-25&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">endDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2018-7-3&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">tmp</span> <span class="operator">=</span> startDate;</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            now.setTime(startDate);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; tmp.getTime() &lt; endDate.getTime(); i++) &#123;</span><br><span class="line">                tmp = now.getTime();</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;天：&quot;</span>+sdf.format(tmp));</span><br><span class="line">                now.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>第1天：2018-06-25<br>第2天：2018-06-26<br>第3天：2018-06-27<br>第4天：2018-06-28<br>第5天：2018-06-29<br>第6天：2018-06-30<br>第7天：2018-07-01<br>第8天：2018-07-02<br>第9天：2018-07-03</p></blockquote><p>2.第二种利用Java8的LocalDate类处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">25</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">between</span> <span class="operator">=</span> ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= between; i++) &#123;</span><br><span class="line">    System.out.println(startDate.plus(i,ChronoUnit.DAYS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>2018-06-25<br>2018-06-26<br>2018-06-27<br>2018-06-28<br>2018-06-29<br>2018-06-30<br>2018-07-01<br>2018-07-02<br>2018-07-03</p></blockquote><p>3.基于以上 利用流式处理。 <a href="https://so.csdn.net/so/search?q=Stream&spm=1001.2101.3001.7020">Stream</a>.iterate(final T seed, final UnaryOperator f)</p><p>指定一个seed，生成从seed到常量f的流。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(startDate, x -&gt; x.plusDays(<span class="number">1</span>)).limit(ChronoUnit.DAYS.between(startDate, endDate) + <span class="number">1</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>根据起始值当前日期，每次生成一个指定递增值（day+1）的天数，limit(n)用于截断流的长度，即只获取两天之差的天数值，打印输出。</p><blockquote><p>2018-06-25<br>2018-06-26<br>2018-06-27<br>2018-06-28<br>2018-06-29<br>2018-06-30<br>2018-07-01<br>2018-07-02<br>2018-07-03</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见问题(一)</title>
      <link href="/2018/07/14/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98(%E4%B8%80)/"/>
      <url>/2018/07/14/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常见问题之OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#Git常见问题之OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="Git常见问题之OpenSSL SSL_read: Connection was reset, errno 10054"></a>Git常见问题之OpenSSL SSL_read: Connection was reset, errno 10054</h2><p>今天git clone github项目时，出现此问题。经过网上查阅，这是服务器的<a href="https://so.csdn.net/so/search?q=SSL&spm=1001.2101.3001.7020">SSL</a>证书没有经过第三方机构的签署，导致报错。</p><p>可能由于github访问的网络问题，尝试了多次后 可以正常clone项目。</p><p>  <strong>如果多次请求不行</strong></p><p>可以尝试关闭SSL服务验证，git bash下执行以下命令后重新clone即可：</p><p><code>git config --global http.sslVerify &quot;false&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地文件上传远程仓库</title>
      <link href="/2018/07/10/Git%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2018/07/10/Git%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Git本地文件上传远程仓库"><a href="#Git本地文件上传远程仓库" class="headerlink" title="Git本地文件上传远程仓库"></a>Git本地文件上传远程仓库</h2><h4 id="本地新建文件项目推送至远程gitee-x2F-github仓库存放"><a href="#本地新建文件项目推送至远程gitee-x2F-github仓库存放" class="headerlink" title="本地新建文件项目推送至远程gitee&#x2F;github仓库存放"></a>本地新建文件项目推送至远程gitee&#x2F;github仓库存放</h4><p>1.在gitee创建初始化一个远程仓库，记下远程仓库地址如： <a href="https://gitee.com/xxxx/test01.git">https://gitee.com/xxxx/test01.git</a></p><p>2.在本地电脑新建一个文件夹test01,然后右键Git Bash Here*(前提安装好git环境)*  进入git命令窗口</p><p>本地项目初始化</p><p> <code>git init</code></p><p>3.绑定远程仓库地址</p><p><code>git remote add origin https://gitee.com/zhangkejiu/test01.git</code></p><p>git remote 查看当前远程仓库名称</p><p>git remote -v 查看远程仓库地址</p><p><img src="https://s2.loli.net/2022/08/17/MbZWwPmaSVFec4o.png" alt="image.png"></p><p>如上图，有两条地址fetch和push，fetch标识的是表示我们要拉取到的地址，push则表示我们要推送给远程仓库的地址。</p><p>（也可以在.git隐藏文件里的config文件里查看）</p><p>如下信息：</p><p><code>[remote &quot;origin&quot;]</code><br>    <code>url = https://gitee.com/zhangkejiu/test01.git</code><br>    <code>fetch = +refs/heads/*:refs/remotes/origin/*</code><br><code>[branch &quot;master&quot;]</code><br>    <code>remote = origin</code><br>    <code>merge = refs/heads/master</code></p><p><strong>若绑定地址错误，可通过一下命令解绑后，重新绑定</strong></p><p><code>git remote remove origin</code></p><p>4.在test01文件夹下准备新建一个test.txt文件，推送至远程仓库存储</p><p> 查看当前本地仓库状态：</p><p><code>git status</code></p><p><img src="https://s2.loli.net/2022/08/17/DacUSBeG9gxwirm.png" alt="image.png"></p><p>当前状态未添加至“暂存库”,需先使用 git add 命令添加至“暂存区” 。<a href="#git_workplace">Git存储区概念</a></p><p><code>git add  .   // . 添加当前目录下的所有文件到暂存区</code></p><p><code>git add filename1 filename2 .. //添加文件filename1,2..</code></p><p>此处我们将此文件下所有文件添加至暂存区</p><p><code>git add .</code></p><p>再查看当前状态 git status</p><p><img src="https://s2.loli.net/2022/08/17/jAoq3iBgz5RDrv7.png" alt="image.png"></p><p><strong>注</strong>： git rm –cached test.txt   删除暂存区文件，但保留工作区的文件。需重新git add 添加至暂存区</p><p>查看当前状态：</p><p><img src="https://s2.loli.net/2022/08/17/dyHUj8ukSQPiMWO.png" alt="image.png"></p><p>5.提交至版本库</p><p><code>git commit -m &quot;test 1&quot;</code> </p><p>-m 为提交信息 必填</p><p><img src="https://s2.loli.net/2022/08/17/WmeCQMHXqAshTxP.png" alt="image.png"></p><p>6.推送至远程仓库</p><p><code>git push --set-upstream origin master</code></p><p>首次推送需带 –set-upstream 参数与远程仓库建立连接，<strong>后可直接git push</strong></p><p>若出现以下显示，由于安全认证关闭警告问题，可再次尝试执行推送命令</p><p><img src="https://s2.loli.net/2022/08/17/UP8gXzLtSsHwBA9.png" alt="image.png"></p><p>或<strong>重新打开认证</strong></p><p><code>git config --global http.sslVerify true</code></p><p> 重新执行推送命令后，推送成功。检查远程仓库文件如下图：</p><p><img src="https://s2.loli.net/2022/08/17/ysRqarN7tSOG84L.png" alt="image.png"></p><hr><p><a id="git_workplace"></a> Git 工作区、暂存区和版本库概念：</p><ul><li><strong>工作区（Working Directory）：</strong>电脑里能看到的目录，可以直接编辑的地方。。</li><li><strong>暂存区（Stage&#x2F;Index）：</strong>数据暂时存放的区域。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库（commit History）：</strong>存放已经提交的数据。工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p>下图大致展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="https://s2.loli.net/2022/08/17/zB7abJCqsQi3oEf.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
