<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMq 消息队列</title>
      <link href="/2022/09/01/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2022/09/01/RabbitMQ%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么使用消息队列"><a href="#一、为什么使用消息队列" class="headerlink" title="一、为什么使用消息队列"></a>一、为什么使用消息队列</h2><p>解耦、异步、削峰</p><h2 id="1-1-解耦"><a href="#1-1-解耦" class="headerlink" title="1.1 解耦"></a>1.1 解耦</h2><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？A 系统负责人几乎崩溃……</p><p>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？头发都白了啊！</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><strong>总结</strong>：通过一个 MQ，Pub&#x2F;Sub 发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><h2 id="1-2-异步"><a href="#1-2-异步" class="headerlink" title="1.2 异步"></a>1.2 异步</h2><p>再来看一个场景，A 系统接收一个请求，需要在自己本地写库，还需要在 BCD 三个系统写库，自己本地写库要 3ms，BCD 三个系统分别写库要 300ms、450ms、200ms。最终请求总延时是 3 + 300 + 450 + 200 &#x3D; 953ms，接近 1s，用户感觉搞个什么东西，慢死了慢死了。用户通过浏览器发起请求，等待个 1s，这几乎是不可接受的。</p><p>一般互联网类的企业，对于用户直接的操作，一般要求是每个请求都必须在 200 ms 以内完成，对用户几乎是无感知的。</p><p>如果<strong>使用 MQ</strong>，那么 A 系统连续发送 3 条消息到 MQ 队列中，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 3 + 5 &#x3D; 8ms，对于用户而言，其实感觉上就是点个按钮，8ms 以后就直接返回了，爽！网站做得真好，真快！</p><h2 id="1-3-削峰"><a href="#1-3-削峰" class="headerlink" title="1.3 削峰"></a>1.3 削峰</h2><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p><p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。</p><p>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><h1 id="二、消息队列有什么缺点"><a href="#二、消息队列有什么缺点" class="headerlink" title="二、消息队列有什么缺点"></a>二、消息队列有什么缺点</h1><p>优点上面已经说了，就是<strong>在特殊场景下有其对应的好处</strong>，<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>。</p><p>缺点有以下几个：</p><ul><li>系统可用性降低<br>系统引入的外部依赖越多，越容易挂掉。本来你就是 A 系统调用 BCD 三个系统的接口就好了，人 ABCD 四个系统好好的，没啥问题，你偏加个 MQ 进来，万一 MQ 挂了咋整，MQ 一挂，整套系统崩溃的，你不就完了？<strong>如何保证消息队列的高可用</strong>？。</li><li>系统复杂度提高<br>硬生生加个 MQ 进来，你怎么<strong>保证消息没有重复消费</strong>？怎么<strong>处理消息丢失的情况</strong>？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已。</li><li>一致性问题<br>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</li></ul><p>所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，做好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了 10 倍。但是关键时刻，用，还是得用的。</p><h1 id="三、常用消息队列比较"><a href="#三、常用消息队列比较" class="headerlink" title="三、常用消息队列比较"></a>三、常用消息队列比较</h1><p>Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</p><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百&#x2F;几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p><p>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；</p><p>后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</p><p>不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 Apache，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。</p><p>所以<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择。</p><p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p><h1 id="四、如何保证RabbitMQ的高可用"><a href="#四、如何保证RabbitMQ的高可用" class="headerlink" title="四、如何保证RabbitMQ的高可用"></a>四、如何保证RabbitMQ的高可用</h1><p>RabbitMQ 是比较有代表性的，因为是<strong>基于主从</strong>（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。</p><p>RabbitMQ 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><h2 id="4-1-单机模式"><a href="#4-1-单机模式" class="headerlink" title="4.1 单机模式"></a>4.1 单机模式</h2><p>单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的，没人生产用单机模式。</p><h2 id="4-2-普通集群模式"><a href="#4-2-普通集群模式" class="headerlink" title="4.2 普通集群模式"></a>4.2 普通集群模式</h2><p>无高可用性</p><p>普通集群模式，意思就是在多台机器上启动多个 RabbitMQ 实例，每个机器启动一个。你<strong>创建的 queue，只会放在一个 RabbitMQ 实例上</strong>，但是每个实例都同步 queue 的元数据（元数据可以认为是 queue 的一些配置信息，通过元数据，可以找到 queue 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 queue 所在实例上拉取数据过来。</p><p>这种方式确实很麻烦，也不怎么好，<strong>没做到所谓的分布式</strong>，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 queue 所在实例消费数据，前者有<strong>数据拉取的开销</strong>，后者导致<strong>单实例性能瓶颈</strong>。</p><p>而且如果那个放 queue 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你<strong>开启了消息持久化</strong>，让 RabbitMQ 落地存储消息的话，<strong>消息不一定会丢</strong>，得等这个实例恢复了，然后才可以继续从这个 queue 拉取数据。</p><p>所以这个事儿就比较尴尬了，这就<strong>没有什么所谓的高可用性</strong>，<strong>这方案主要是提高吞吐量的</strong>，就是说让集群中多个节点来服务某个 queue 的读写操作。</p><h2 id="4-3-镜像集群模式"><a href="#4-3-镜像集群模式" class="headerlink" title="4.3 镜像集群模式"></a>4.3 镜像集群模式</h2><p>这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会<strong>存在于多个实例上</strong>，就是说，每个 RabbitMQ 节点都有这个 queue 的一个<strong>完整镜像</strong>，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把<strong>消息同步</strong>到多个实例的 queue 上。</p><p>那么<strong>如何开启这个镜像集群模式</strong>呢？其实很简单，RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是<strong>镜像集群模式的策略</strong>，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于：</p><p><strong>第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！</strong></p><p> <strong>第二，这么玩儿，不是分布式的，就没有扩展性可言了，如果某个 queue 负载很重，你加机器，新增的机器也包含了这个 queue 的所有数据，并没有办法线性扩展你的 queue。你想，如果这个 queue 的数据量很大，大到这个机器上的容量无法容纳了，此时该怎么办呢？</strong></p><h1 id="五、如何保证消息不被重复消费"><a href="#五、如何保证消息不被重复消费" class="headerlink" title="五、如何保证消息不被重复消费"></a>五、如何保证消息不被重复消费</h1><p>举个例子吧。假设你有个系统，消费一条消息就往数据库里插入一条数据，要是你一个消息重复两次，你不就插入了两条，这数据不就错了？但是你要是消费到第二次的时候，自己判断一下是否已经消费过了，若是就直接扔了，这样不就保留了一条数据，从而保证了数据的正确性。</p><p>一条数据重复出现两次，数据库里就只有一条数据，这就保证了系统的幂等性。</p><p>幂等性，通俗点说，就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，<strong>不能出错</strong>。</p><p>那么如何保证消息队列消费的幂等性？</p><p>其实还是得结合业务来思考，我这里给几个思路：</p><ul><li>比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。</li><li>比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。</li><li>比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</li><li>比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。</li></ul><h1 id="六、如何保证消息的可靠性传输"><a href="#六、如何保证消息的可靠性传输" class="headerlink" title="六、如何保证消息的可靠性传输"></a>六、如何保证消息的可靠性传输</h1><p>数据的丢失问题，可能出现在生产者、MQ、消费者中，咱们从 RabbitMQ 来分析一下吧。</p><h2 id="6-1-生产者丢失数据"><a href="#6-1-生产者丢失数据" class="headerlink" title="6.1 生产者丢失数据"></a>6.1 生产者丢失数据</h2><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。</p><p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者<strong>发送数据之前</strong>开启 RabbitMQ 事务<code>channel.txSelect</code>，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务<code>channel.txRollback</code>，然后重试发送消息；如果收到了消息，那么可以提交事务<code>channel.txCommit</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">channel.txSelect</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里发送消息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里再次重发这条消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务</span></span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure><p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p><p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>事务机制和 <code>confirm</code> 机制最大的不同在于，<strong>事务机制是同步的</strong>，你提交一个事务之后会<strong>阻塞</strong>在那儿，但是 <code>confirm</code> 机制是<strong>异步</strong>的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p><p>所以一般在生产者这块<strong>避免数据丢失</strong>，都是用 <code>confirm</code> 机制的。</p><blockquote><p>因此，RabbitMQ有一个ACK机制。当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>大家觉得哪种更好呢？</p><p>这需要看消息的重要性：</p><ul><li>如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便</li><li>如果消息非常重要，不容丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK，RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。</li></ul></blockquote><p>客户端实现生产者confirm有三种编程方式：</p><ul><li><p>普通confirm模式：每发送一条消息后，调用waitForConfirms()方法，等待服务器端confirm。实际上是一种串行confirm了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (channel.waitForConfirms())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;send message failed!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>批量confirm模式：每发送一批消息后，调用waitForConfirms()方法，等待服务器端confirm。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">channel.confirmSelect();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;batchCount;i++)&#123;</span><br><span class="line">    channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!channel.waitForConfirms())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;send message failed.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是问题在于一旦出现confirm返回false或者超时的情况时，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息数量，并且，当消息经常丢失时，批量confirm性能应该是不升反降的。</p></li><li><p>异步confirm模式：提供一个回调方法，服务端confirm了一条或者多条消息后Client端会回调这个方法。</p><p>异步confirm模式的编程实现最复杂，Channel对象提供的ConfirmListener()回调方法只包含deliveryTag（当前Chanel发出的消息序号），我们需要自己为每一个Channel维护一个unconfirm的消息序号集合，每publish一条数据，集合中元素加1，每回调一次handleAck方法，unconfirm集合删掉相应的一条（multiple&#x3D;false）或多条（multiple&#x3D;true）记录。从程序运行效率上看，这个unconfirm集合最好采用有序集合SortedSet存储结构。实际上，SDK中的waitForConfirms()方法也是通过SortedSet维护消息序号的</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;Long&gt; confirmSet = Collections.synchronizedSortedSet(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Long&gt;());</span><br><span class="line">channel.confirmSelect();</span><br><span class="line">       channel.addConfirmListener(<span class="keyword">new</span> <span class="title class_">ConfirmListener</span>() &#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAck</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">               <span class="keyword">if</span> (multiple) &#123;</span><br><span class="line">                   confirmSet.headSet(deliveryTag + <span class="number">1</span>).clear();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   confirmSet.remove(deliveryTag);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNack</span><span class="params">(<span class="type">long</span> deliveryTag, <span class="type">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;Nack, SeqNo: &quot;</span> + deliveryTag + <span class="string">&quot;, multiple: &quot;</span> + multiple);</span><br><span class="line">               <span class="keyword">if</span> (multiple) &#123;</span><br><span class="line">                   confirmSet.headSet(deliveryTag + <span class="number">1</span>).clear();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   confirmSet.remove(deliveryTag);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="type">long</span> <span class="variable">nextSeqNo</span> <span class="operator">=</span> channel.getNextPublishSeqNo();</span><br><span class="line">           channel.basicPublish(ConfirmConfig.exchangeName, ConfirmConfig.routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, ConfirmConfig.msg_10B.getBytes());</span><br><span class="line">           confirmSet.add(nextSeqNo);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-2-RabbitMQ丢失数据"><a href="#6-2-RabbitMQ丢失数据" class="headerlink" title="6.2 RabbitMQ丢失数据"></a>6.2 RabbitMQ丢失数据</h2><p>就是 RabbitMQ 自己弄丢了数据，这个你必须<strong>开启 RabbitMQ 的持久化</strong>，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，<strong>恢复之后会自动读取之前存储的数据</strong>，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，<strong>可能导致少量数据丢失</strong>，但是这个概率较小。</p><p>设置持久化有<strong>两个步骤</strong>：</p><ul><li>创建 queue 的时候将其设置为持久化<br>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2<br>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p><p><strong>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code>，你也是可以自己重发的。</strong></p><h2 id="6-3-消费端丢失数据"><a href="#6-3-消费端丢失数据" class="headerlink" title="6.3 消费端丢失数据"></a>6.3 消费端丢失数据</h2><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，<strong>刚消费到，还没处理，结果进程挂了</strong>，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 <code>ack</code> 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 <code>ack</code>，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 <code>ack</code> 一把。这样的话，如果你还没处理完，不就没有 <code>ack</code> 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><h1 id="七、如何保证消息的顺序性"><a href="#七、如何保证消息的顺序性" class="headerlink" title="七、如何保证消息的顺序性"></a>七、如何保证消息的顺序性</h1><p>先看看顺序会错乱的场景：</p><ul><li><strong>RabbitMQ</strong>：一个 queue，多个 consumer。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1&#x2F;data2&#x2F;data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者2先执行完操作，把 data2 存入数据库，然后是 data1&#x2F;data3。这不明显乱了。</li></ul><p>解决方案：</p><p>拆分多个 queue，每个 queue 一个 consumer，就是多一些 queue 而已，确实是麻烦点；或者就一个 queue 但是对应一个 consumer，然后这个 consumer 内部用内存队列做排队，然后分发给底层不同的 worker 来处理。 </p><h1 id="八、有几百万消息持续积压几小时，该怎么解决"><a href="#八、有几百万消息持续积压几小时，该怎么解决" class="headerlink" title="八、有几百万消息持续积压几小时，该怎么解决"></a>八、有几百万消息持续积压几小时，该怎么解决</h1><p>几千万条数据在 MQ 里积压了七八个小时，从下午 4 点多，积压到了晚上 11 点多。这个是我们真实遇到过的一个场景，确实是线上故障了，这个时候要不然就是修复 consumer 的问题，让它恢复消费速度，然后傻傻的等待几个小时消费完毕。这个肯定不能在面试的时候说吧。</p><p>一个消费者一秒是 1000 条，一秒 3 个消费者是 3000 条，一分钟就是 18 万条。所以如果你积压了几百万到上千万的数据，即使消费者恢复了，也需要大概 1 小时的时间才能恢复过来。</p><p>一般这个时候，只能临时紧急扩容了，具体操作步骤和思路如下：</p><ul><li>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</li><li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</li><li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，<strong>消费之后不做耗时的处理</strong>，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li><li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li><li>等快速消费完积压数据之后，<strong>得恢复原先部署的架构</strong>，<strong>重新</strong>用原先的 consumer 机器来消费消息。</li></ul><h1 id="九、如何解决消息队列的延时及过期失效问题"><a href="#九、如何解决消息队列的延时及过期失效问题" class="headerlink" title="九、如何解决消息队列的延时及过期失效问题"></a>九、如何解决消息队列的延时及过期失效问题</h1><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是<strong>大量的数据会直接搞丢</strong>。</p><p>这个情况下，就不是说要增加 consumer 消费积压的消息，因为实际上没啥积压，而是丢了大量的消息。我们可以采取一个方案，就是<strong>批量重导</strong>，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><h1 id="十、消息队列满了以后该怎么处理"><a href="#十、消息队列满了以后该怎么处理" class="headerlink" title="十、消息队列满了以后该怎么处理"></a>十、消息队列满了以后该怎么处理</h1><p>如果消息积压在 mq 里，你很长时间都没有处理掉，此时导致 mq 都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，<strong>消费一个丢弃一个，都不要了</strong>，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><h1 id="十一、如何设计一个消息队列"><a href="#十一、如何设计一个消息队列" class="headerlink" title="十一、如何设计一个消息队列"></a>十一、如何设计一个消息队列</h1><ul><li>首先这个 mq 得支持可伸缩性吧，就是需要的时候快速扩容，就可以增加吞吐量和容量，那怎么搞？设计个分布式的系统呗，参照一下 kafka 的设计理念，broker -&gt; topic -&gt; partition，每个 partition 放一个机器，就存一部分数据。如果现在资源不够了，简单啊，给 topic 增加 partition，然后做数据迁移，增加机器，不就可以存放更多数据，提供更高的吞吐量了？</li><li>其次你得考虑一下这个 mq 的数据要不要落地磁盘吧？那肯定要了，落磁盘才能保证别进程挂了数据就丢了。那落磁盘的时候怎么落啊？顺序写，这样就没有磁盘随机读写的寻址开销，磁盘顺序读写的性能是很高的，这就是 kafka 的思路。</li><li>其次你考虑一下你的 mq 的可用性啊？</li><li>能不能支持数据 0 丢失啊？</li></ul><h1 id="十二、RabbitMQ消息模型"><a href="#十二、RabbitMQ消息模型" class="headerlink" title="十二、RabbitMQ消息模型"></a>十二、RabbitMQ消息模型</h1><h2 id="12-1-基本消息模型"><a href="#12-1-基本消息模型" class="headerlink" title="12.1 基本消息模型"></a>12.1 基本消息模型</h2><p>P（producer&#x2F; publisher）：生产者，一个发送消息的用户应用程序。</p><p>C（consumer）：消费者，消费和接收有类似的意思，消费者是一个主要用来等待接收消息的用户应用程序</p><p>队列（红色区域）：rabbitmq内部类似于邮箱的一个概念。虽然消息流经rabbitmq和你的应用程序，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制，实质上是一个大的消息缓冲区。许多生产者可以发送消息到一个队列，许多消费者可以尝试从一个队列接收数据。</p><p>总之：生产者将消息发送到队列，消费者从队列中获取消息，队列是存储消息的缓冲区。</p><h2 id="12-2-work消息模型"><a href="#12-2-work消息模型" class="headerlink" title="12.2 work消息模型"></a>12.2 work消息模型</h2><p> 创建一个工作队列，在多个工作者之间分配耗时任务。</p><p>工作队列，又称任务队列。主要思想就是避免执行资源密集型任务时，必须等待它执行完成。相反我们稍后完成任务，我们将任务封装为消息并将其发送到队列。 在后台运行的工作进程将获取任务并最终执行作业。当你运行许多工人时，任务将在他们之间共享，但是一个消息只能被一个消费者获取。</p><p>​    P：生产者：任务的发布者</p><p>​    C1：消费者，领取任务并且完成任务，假设完成速度较快</p><p>​    C2：消费者2：领取任务并完成任务，假设完成速度慢</p><h2 id="12-3-订阅模型"><a href="#12-3-订阅模型" class="headerlink" title="12.3 订阅模型"></a>12.3 订阅模型</h2><h3 id="12-3-1-Publish"><a href="#12-3-1-Publish" class="headerlink" title="12.3.1 Publish"></a>12.3.1 Publish</h3><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个消费者</li><li>2）  每个<strong>消费者有自己的queue</strong>（队列）</li><li>3）  每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li>4）  <strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li>5）  交换机把消息发送给绑定过的所有队列</li><li>6）  队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h3 id="12-3-2-Routing"><a href="#12-3-2-Routing" class="headerlink" title="12.3.2 Routing"></a>12.3.2 Routing</h3><p>有选择性的接收消息</p><p>在订阅模式中，生产者发布消息，所有消费者都可以获取所有消息。</p><p>在路由模式中，我们将添加一个功能 - 我们将只能订阅一部分消息。 例如，我们只能将重要的错误消息引导到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。</p><p><strong>但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</strong></p><p>在Direct模型下，队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p><p>消息的发送方在向Exchange发送消息时，也必须指定消息的routing key。</p><h3 id="12-3-3-Topic"><a href="#12-3-3-Topic" class="headerlink" title="12.3.3 Topic"></a>12.3.3 Topic</h3><p>opic<code>类型的</code>Exchange<code>与</code>Direct<code>相比，都是可以根据</code>RoutingKey<code>把消息路由到不同的队列。只不过</code>Topic<code>类型</code>Exchange<code>可以让队列在绑定</code>Routing key&#96; 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p>​         <code>#</code>：匹配一个或多个词</p><p>​         <code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p>​         <code>audit.#</code>：能够匹配<code>audit.irs.corporate</code> 或者 <code>audit.irs</code></p><p>​         <code>audit.*</code>：只能匹配<code>audit.irs</code></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql 主从复制</title>
      <link href="/2020/04/18/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2020/04/18/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-主从复制"><a href="#MySql-主从复制" class="headerlink" title="MySql 主从复制"></a>MySql 主从复制</h2><h4 id="主要介绍"><a href="#主要介绍" class="headerlink" title="主要介绍"></a>主要介绍</h4><p>mysql 主从复制是一个异步的复制过程，底层是基于mysql数据库自带的二进制日志功能。就是一台或多台Mysql数据库（slave从库）从另一台（master主库）进行日志的复制然后再解析日志并应用到自身，最终实现从库数据与主库数据保持一致。mysql主从复制是mysql自带功能，无需借助第三方工具</p><p>mysql复制过程主要分三步：</p><p>1.master将改变记录到二进制日志（binary log）</p><p>2.slave 将master的二进制日志 拷贝到它的中继日志（relay log）文件中</p><p>3.slave重做中继日志中的事件，将改变应用到自己的数据库中</p><p><img src="https://s2.loli.net/2022/09/05/kN6t2bp9iByInEx.png" alt="b44cc04a4a074a78a3bbedd482fb0865.png"></p><h4 id="配置过程："><a href="#配置过程：" class="headerlink" title="配置过程："></a>配置过程：</h4><h5 id="1-准备两个服务器"><a href="#1-准备两个服务器" class="headerlink" title="1.准备两个服务器"></a>1.准备两个服务器</h5><p>master: 192.168.31.128<br>slave: 192.168.31.128</p><h5 id="2-配置主服务器master"><a href="#2-配置主服务器master" class="headerlink" title="2.配置主服务器master"></a>2.配置主服务器master</h5><p>1.进入my.cnf文件, vim &#x2F;etc&#x2F;my.cnf 添加以下内容：</p><p>log-bin&#x3D;mysql-bin  # 启用二进制日志<br>server-id&#x3D;128   # 服务器唯一ID，可以任意设置，但必须唯一</p><p>ps aux | grep mysql  #查看mysql服务名</p><p>systemctl restart mysql; （你的可能是systemctl restart mysqld ）#重启mysql服务</p><p>2.查看mysql是否启动成功systemctl status mysql ; &#x2F;&#x2F; 成功状态，绿色的active(running)</p><p>binlog-ignore-db&#x3D;mysql  # 不要复制的数据库<br>binlog-do-db&#x3D;testdb     # 要复制的数据库名<br>binlog_format&#x3D;STATEMENT</p><p>3.查看mysql是否启动成功<br>systemctl status mysqld;   &#x2F;&#x2F; 成功状态，绿色的active(running)</p><p>4.检查防火墙是否关闭<br>systemctl status firewalld;</p><p>防火墙开放指定端口</p><blockquote><p>firewall-cmd  –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</p></blockquote><p>5.进入数据库 授权</p><p>进入mysql</p><p>mysql -uroot -proot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> 授予权限(先创建用户后授权)</span><br><span class="line">CREATE USER &#x27;zhangkejiu&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"> </span><br><span class="line">grant replication slave on *.* to &#x27;zhangkejiu&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- grant replication slave on *.* to &#x27;zhangkejiu&#x27;@&#x27;%&#x27; mysql_native_password by &#x27;123456&#x27; ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建一个用户zhangkejiu 密码123456</span><br><span class="line">-- 给zhangkejiu用户授予replication slave 权限</span><br><span class="line">-- 常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户 才能通过该用户复制</span><br></pre></td></tr></table></figure><p>6.查看主服务器状态<br>show master status;</p><p>如：</p><p>+——————+———-+————–+——————+——————-+<br>| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+——————+———-+————–+——————+——————-+<br>| mysql-bin.000001 |      663 |              |                  |                   |<br>+——————+———-+————–+——————+——————-+</p><h5 id="3-配置从库slave"><a href="#3-配置从库slave" class="headerlink" title="3.配置从库slave"></a>3.配置从库slave</h5><p>(1)进入my.cnf文件 vim &#x2F;etc&#x2F;my.cnf </p><p>添加以下内容：</p><p> server-id&#x3D;127 # id唯一 </p><p>relay-log&#x3D;mysql-relay</p><p>(2)重启mysql<br>systemctl restart mysqld;</p><p>(3)查看mysql是否启动成功<br>systemctl status mysqld;  &#x2F;&#x2F; 出现绿色 active(running)</p><p>(4)查看防火墙是否关闭<br>systemctl status firewalld;</p><p>(5)进入mysql<br>mysql -uroot -proot</p><p>(6)设置主从同步<br>change master to<br>master_host&#x3D;’192.168.31.128’, master_user&#x3D;’zhangkejiu’,master_password&#x3D;’123456’,<br>master_log_file&#x3D;’mysql-bin.000001’,master_log_pos&#x3D;663;</p><p>#启动从库</p><p>start slave;</p><p>注意：master_log_file 和master_log_pos的值要和主服务器显示的状态一致</p><p>(7)查看从服务器状态<br>show slave status\G</p><p>如下显示 表示配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HtmlUnit 获取抖音无印视频</title>
      <link href="/2019/06/15/%E3%80%90Java%E3%80%91%E8%8E%B7%E5%8F%96%E6%8A%96%E9%9F%B3%E5%88%86%E4%BA%AB%E6%97%A0%E5%8D%B0%E8%A7%86%E9%A2%91/"/>
      <url>/2019/06/15/%E3%80%90Java%E3%80%91%E8%8E%B7%E5%8F%96%E6%8A%96%E9%9F%B3%E5%88%86%E4%BA%AB%E6%97%A0%E5%8D%B0%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Java获取抖音无印视频"><a href="#Java获取抖音无印视频" class="headerlink" title="Java获取抖音无印视频"></a>Java获取抖音无印视频</h2><blockquote><p>有时候，想下载抖音里的视频 有权限或者有水印。这篇文章可以教你怎么下载抖音无印视频</p></blockquote><p>复制分享链接 url 和 抖音API获取视频信息接口 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;4.61 Nws:/ 复制打开抖音，一起来回顾2016年骑士夺冠时刻# nba# 骑士# 詹... https://v.douyin.com/j472ue4/&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">API</span> <span class="operator">=</span> <span class="string">&quot;https://www.iesdouyin.com/web/api/v2/aweme/iteminfo/?item_ids=&quot;</span>;</span><br></pre></td></tr></table></figure><p>定义正则匹配https:&#x2F;&#x2F;后面链接地址 :<code>https://v.douyin.com/j472ue4/</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;https+://[^\\s]*&quot;</span>;</span><br><span class="line"> <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"> <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(url);</span><br><span class="line"> <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">    baseUrl = m.group();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>1.使用HtmlUnit 创建WebClient浏览器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造创建 默认使用谷歌浏览器</span></span><br><span class="line"> <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.浏览器设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置支持AJAX</span></span><br><span class="line">        webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">        <span class="comment">////开启页面重定向</span></span><br><span class="line">        webClient.getOptions().setRedirectEnabled(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//关闭ssl安全访问</span></span><br><span class="line">        webClient.getOptions().setUseInsecureSSL(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//关闭异常抛出</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//忽略解析 css js false</span></span><br><span class="line">        webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置是否允许本机 ActiveX。默认值为假。请注意，除非您完全信任 JavaScript 代码，否则绝不应该允许运行本机 ActiveX 组件，因为它不受 Java 虚拟机控制</span></span><br><span class="line">        webClient.getOptions().setActiveXNative(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取HtmlPage信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String baseUrl = &quot;https://v.douyin.com/j472ue4/&quot;;  </span></span><br><span class="line">page = webClient.getPage(baseUrl);</span><br></pre></td></tr></table></figure><p>4.获取跳转url</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> String  realUrl=page.getUrl().toString();</span><br><span class="line"><span class="comment">//https://www.douyin.com/video/7111515518200237343?previous_page=app_code_link</span></span><br></pre></td></tr></table></figure><p>5.截取 video&#x2F;后面开头到？之间的Id ,然后拼接API 请求接口 返回JSON数据</p><p><code>String getJson=API+realUrl.substring(s.lastIndexOf(&quot;/&quot;) + 1, s.indexOf(&quot;?&quot;));</code></p><p><code>String s2 = HttpUtil.get(getJson);</code></p><p>JSON 数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;logid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022082509232601021206603512314891&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;now&quot;</span><span class="punctuation">:</span> <span class="number">1661390606818</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filter_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;item_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;avatar_larger&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p9.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p5.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatar_medium&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p11.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p6.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;avatar_thumb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;100x100/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p6.douyinpic.com/aweme/100x100/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3.douyinpic.com/aweme/100x100/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p11.douyinpic.com/aweme/100x100/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;follow_status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;咪咕篮球&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;short_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;612386281&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;52899368367&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;unique_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;migulanqiu&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author_user_id&quot;</span><span class="punctuation">:</span> <span class="number">52899368367</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aweme_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7111515518200237343&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aweme_type&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cha_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;cha_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;詹姆斯&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1600800922548231&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cover_item&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;douyin-admin-obj/19b4f627e23cfbde0801b0ba050cdd38&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;https://p9-sign.douyinpic.com/douyin-admin-obj/19b4f627e23cfbde0801b0ba050cdd38~c5_100x100.jpeg?x-expires=1661410800&amp;x-signature=6F8Q7oeZVfwzSuNa2KJD0ZZlzPM%3D&amp;from=715538335&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;https://p26-sign.douyinpic.com/douyin-admin-obj/19b4f627e23cfbde0801b0ba050cdd38~c5_100x100.jpeg?x-expires=1661410800&amp;x-signature=Ssv2qvBgQeXYh2%2FCt%2FNFKTeLbvg%3D&amp;from=715538335&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;https://p3-sign.douyinpic.com/douyin-admin-obj/19b4f627e23cfbde0801b0ba050cdd38~c5_100x100.jpeg?x-expires=1661410800&amp;x-signature=bDsDxbLeFTUBk6WwN7vkL86kkEo%3D&amp;from=715538335&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;勒布朗·詹姆斯（LeBron James），1984年12月30日出生于美国俄亥俄州阿克伦），美国职业篮球运动员，司职小前锋，绰号“小皇帝”，现效力于NBA洛杉矶湖人队。他在2003年NBA选秀中于首轮第1顺位被克利夫兰骑士队选中，职业生涯已经9次进入总决赛，并取得了3次总冠军，3次FMVP，此外他还获得了4次MVP、3次全明星MVP、1次最佳新秀、15次最佳阵容，堪称当今联盟现役第一人。&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hash_tag_profile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;douyin-admin-obj/19b4f627e23cfbde0801b0ba050cdd38&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;is_commerce&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;user_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;view_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;create_time&quot;</span><span class="punctuation">:</span> <span class="number">1655778761</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一起来回顾2016年骑士夺冠时刻#nba#骑士#詹姆斯 &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">109065</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;forward_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group_id&quot;</span><span class="punctuation">:</span> <span class="number">7111515518200237343</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group_id_str&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7111515518200237343&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;is_live_replay&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;is_preview&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;music&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;咪咕篮球&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cover_hd&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p11.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p6.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p26.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cover_large&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p11.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p6.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p26.douyinpic.com/aweme/1080x1080/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cover_medium&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p26.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p11.douyinpic.com/aweme/720x720/aweme-avatar/mosaic-legacy_3116e0009185157261372.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cover_thumb&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;168x168/aweme-avatar/mosaic-legacy_3116e0009185157261372&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p6.douyinpic.com/img/aweme-avatar/mosaic-legacy_3116e0009185157261372~c5_168x168.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3.douyinpic.com/img/aweme-avatar/mosaic-legacy_3116e0009185157261372~c5_168x168.jpeg?from=116350172&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p26.douyinpic.com/img/aweme-avatar/mosaic-legacy_3116e0009185157261372~c5_168x168.jpeg?from=116350172&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">109</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7111515691374627620</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7111515691374627620&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;play_url&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://sf6-cdn-tos.douyinstatic.com/obj/ies-music/7111515686754257677.mp3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://sf6-cdn-tos.douyinstatic.com/obj/ies-music/7111515686754257677.mp3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://sf3-cdn-tos.douyinstatic.com/obj/ies-music/7111515686754257677.mp3&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@咪咕篮球创作的原声一咪咕篮球&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;risk_infos&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reflow_unplayable&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;warn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;share_info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;share_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在抖音，记录美好生活&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;share_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一起来回顾2016年骑士夺冠时刻#nba#骑士#詹姆斯 &quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;share_weibo_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#在抖音，记录美好生活#一起来回顾2016年骑士夺冠时刻#nba#骑士#詹姆斯 &quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;share_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.iesdouyin.com/share/video/7111515518200237343/?region=&amp;mid=7111515691374627620&amp;u_code=0&amp;did=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;with_sec_did=1&amp;titleType=title&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;statistics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;aweme_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7111515518200237343&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;comment_count&quot;</span><span class="punctuation">:</span> <span class="number">691</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;digg_count&quot;</span><span class="punctuation">:</span> <span class="number">5210</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;play_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;share_count&quot;</span><span class="punctuation">:</span> <span class="number">394</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text_extra&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_id&quot;</span><span class="punctuation">:</span> <span class="number">1608846127610893</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nba&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_id&quot;</span><span class="punctuation">:</span> <span class="number">1569792844453889</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;骑士&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_id&quot;</span><span class="punctuation">:</span> <span class="number">1600800922548231</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;hashtag_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;詹姆斯&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;video&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tos-cn-p-0015/2c041a27f655486089d1f56c12beb483&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p26-sign.douyinpic.com/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483~c5_300x400.jpeg?x-expires=1662598800&amp;x-signature=zpsx%2Fpw0NMX2vRPy2u7bRTqath8%3D&amp;from=4257465056_large&amp;s=PackSourceEnum_DOUYIN_REFLOW&amp;se=false&amp;sc=cover&amp;l=2022082509232601021206603512314891&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3-sign.douyinpic.com/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483~c5_300x400.jpeg?x-expires=1662598800&amp;x-signature=3EVMB600kNSmkjHUiHLy64qzMTs%3D&amp;from=4257465056_large&amp;s=PackSourceEnum_DOUYIN_REFLOW&amp;se=false&amp;sc=cover&amp;l=2022082509232601021206603512314891&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p9-sign.douyinpic.com/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483~c5_300x400.jpeg?x-expires=1662598800&amp;x-signature=F9SExfQXnkTyQyaWozghYOesNj8%3D&amp;from=4257465056_large&amp;s=PackSourceEnum_DOUYIN_REFLOW&amp;se=false&amp;sc=cover&amp;l=2022082509232601021206603512314891&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;duration&quot;</span><span class="punctuation">:</span> <span class="number">109065</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;dynamic_cover&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tos-cn-p-0015/2c041a27f655486089d1f56c12beb483&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p26-sign.douyinpic.com/obj/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483?x-expires=1662598800&amp;x-signature=hVdktX6lu6AN5hwlHlmaZthY278%3D&amp;from=4257465056_large&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3-sign.douyinpic.com/obj/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483?x-expires=1662598800&amp;x-signature=CeQK17ZaP9uH%2B6xv2hQPU0bwQzM%3D&amp;from=4257465056_large&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p9-sign.douyinpic.com/obj/tos-cn-p-0015/2c041a27f655486089d1f56c12beb483?x-expires=1662598800&amp;x-signature=fhISrjx%2Bhx91BF%2FISJ7uZmBtbOg%3D&amp;from=4257465056_large&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;has_watermark&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1440</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;is_long_video&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;origin_cover&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tos-cn-p-0015/ec13012ec2374d0582c1ff9da21eee63_1655778765&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://p6-sign.douyinpic.com/tos-cn-p-0015/ec13012ec2374d0582c1ff9da21eee63_1655778765~tplv-dy-360p.jpeg?x-expires=1662598800&amp;x-signature=BWvFIfha5FLJHBX%2BusVveTtHNTo%3D&amp;from=4257465056&amp;se=false&amp;biz_tag=feed_cover&amp;l=2022082509232601021206603512314891&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p26-sign.douyinpic.com/tos-cn-p-0015/ec13012ec2374d0582c1ff9da21eee63_1655778765~tplv-dy-360p.jpeg?x-expires=1662598800&amp;x-signature=3LbPQPKGcPw6U6wH8vzvv53z3lY%3D&amp;from=4257465056&amp;se=false&amp;biz_tag=feed_cover&amp;l=2022082509232601021206603512314891&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;https://p3-sign.douyinpic.com/tos-cn-p-0015/ec13012ec2374d0582c1ff9da21eee63_1655778765~tplv-dy-360p.jpeg?x-expires=1662598800&amp;x-signature=8bcO%2Bf%2Bmd91qnu7LgWVN%2BwF0Tkc%3D&amp;from=4257465056&amp;se=false&amp;biz_tag=feed_cover&amp;l=2022082509232601021206603512314891&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;play_addr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v0200fg10000caoiq33c77uesglpt9gg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;url_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;https://aweme.snssdk.com/aweme/v1/playwm/?video_id=v0200fg10000caoiq33c77uesglpt9gg&amp;ratio=720p&amp;line=0&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ratio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;540p&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;vid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v0200fg10000caoiq33c77uesglpt9gg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1080</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status_code&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>6.转换成JSON对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//取名item_list列表第一组数据</span><br><span class="line">  JSONObject jsonObject = JSONUtil.parseObj(s2);</span><br><span class="line">       JSONObject item = jsonObject</span><br><span class="line">                .getJSONArray(&quot;item_list&quot;)</span><br><span class="line">                .getJSONObject(0);</span><br><span class="line">                </span><br><span class="line"> //再取其下video数据</span><br><span class="line">  JSONObject video = jsonObject.getJSONObject(&quot;video&quot;);</span><br><span class="line">  //取出键名play_addr下的url_list列表第一组数据</span><br><span class="line"> String videoUrl= video.getJSONObject(&quot;play_addr&quot;).getJSONArray(&quot;url_list&quot;).getStr(0);</span><br><span class="line"> //&quot;https://aweme.snssdk.com/aweme/v1/playwm/?video_id=v0200fg10000caoiq33c77uesglpt9gg&amp;ratio=720p&amp;line=0&quot;</span><br></pre></td></tr></table></figure><p>注意：</p><p><strong>此链接的playwm中的wm需要去掉，才是无水印视频，否则依旧留有水印</strong></p><p>String finalUrl&#x3D;videoUrl.replace(“playwm”, “play”);</p><p>7.根据链接地址下载到本地</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpUtil.downloadFile(finalUrl, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\123.mp4&quot;</span>));</span><br></pre></td></tr></table></figure><p>8.完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;4.61 Nws:/ 复制打开抖音，一起来回顾2016年骑士夺冠时刻# nba# 骑士# 詹... https://v.douyin.com/j472ue4/&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">API</span> <span class="operator">=</span> <span class="string">&quot;https://www.iesdouyin.com/web/api/v2/aweme/iteminfo/?item_ids=&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;https+://[^\\s]*&quot;</span>;</span><br><span class="line">  <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">  <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(url);</span><br><span class="line">  <span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">     baseUrl = m.group();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line">  webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">  webClient.getOptions().setUseInsecureSSL(<span class="literal">true</span>);</span><br><span class="line">  webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">  webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">  webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">  webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line">  webClient.getOptions().setActiveXNative(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Page</span> <span class="variable">page</span> <span class="operator">=</span> webClient.getPage(baseUrl);</span><br><span class="line">   String  s=page.getUrl().toString();</span><br><span class="line">   <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> HttpUtil.get(API + s.substring(s.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, s.indexOf(<span class="string">&quot;?&quot;</span>)));</span><br><span class="line">  <span class="type">JSONObject</span> <span class="variable">item</span> <span class="operator">=</span> JSONUtil.parseObj(s2)</span><br><span class="line">          .getJSONArray(<span class="string">&quot;item_list&quot;</span>)</span><br><span class="line">          .getJSONObject(<span class="number">0</span>);</span><br><span class="line">  <span class="type">JSONObject</span> <span class="variable">videoObject</span> <span class="operator">=</span> item.getJSONObject(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">finalURl</span> <span class="operator">=</span> videoObject.getJSONObject(<span class="string">&quot;play_addr&quot;</span>).getJSONArray(<span class="string">&quot;url_list&quot;</span>).getStr(<span class="number">0</span>).replace(<span class="string">&quot;playwm&quot;</span>, <span class="string">&quot;play&quot;</span>);</span><br><span class="line">  HttpUtil.downloadFile( finalURl, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\123.mp4&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HtmlUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HtmlUnit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  生成数据库表结构文档</title>
      <link href="/2019/03/24/Java%E4%B9%8B%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3/"/>
      <url>/2019/03/24/Java%E4%B9%8B%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-生成数据库表结构文档"><a href="#Java-生成数据库表结构文档" class="headerlink" title="Java  生成数据库表结构文档"></a>Java  生成数据库表结构文档</h2><h3 id="工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw-HikariCP实现生成数据库文档"><a href="#工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw-HikariCP实现生成数据库文档" class="headerlink" title="工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw+HikariCP实现生成数据库文档"></a>工作需要熟悉表结构或书写数据字典开发文档，此时可以使用Screw+HikariCP实现生成数据库文档</h3><h5 id="Mysql数据库生成："><a href="#Mysql数据库生成：" class="headerlink" title="Mysql数据库生成："></a>Mysql数据库生成：</h5><p>引入依赖包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;!-- Screw Core --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.smallbun.screw&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;screw-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">1.0</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- HikariCP --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.4</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- Mysql Driver --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">8.0</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>直接上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 数据源</span><br><span class="line">HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">hikariConfig.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">hikariConfig.setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/test01?serverTimezone=UTC&quot;);</span><br><span class="line">hikariConfig.setUsername(&quot;root&quot;);</span><br><span class="line">hikariConfig.setPassword(&quot;123456&quot;);</span><br><span class="line">// 设置可以获取tables remarks信息</span><br><span class="line">hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">hikariConfig.setMinimumIdle(2);</span><br><span class="line">hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">// 1、生成文件配置</span><br><span class="line">EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">      // 生成文件路径</span><br><span class="line">      .fileOutputDir(&quot;D://11&quot;)</span><br><span class="line">      // 打开目录</span><br><span class="line">      .openOutputDir(false)</span><br><span class="line">      // 文件类型   EngineFileType.DOC</span><br><span class="line">      .fileType(EngineFileType.HTML)</span><br><span class="line">      // 生成模板实现</span><br><span class="line">      .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"></span><br><span class="line">// 忽略表名</span><br><span class="line">List&lt;String&gt; ignoreTableName = Arrays.asList(&quot;test&quot;);</span><br><span class="line">// 忽略表前缀</span><br><span class="line">List&lt;String&gt; ignorePrefix = Arrays.asList(&quot;_a&quot;, &quot;a&quot;);</span><br><span class="line">// 忽略表后缀</span><br><span class="line">List&lt;String&gt; ignoreSuffix = Arrays.asList(&quot;_bak&quot;, &quot;bak&quot;);</span><br><span class="line"></span><br><span class="line">// 2、配置想要忽略的表</span><br><span class="line">ProcessConfig processConfig = ProcessConfig.builder().ignoreTableName(ignoreTableName)</span><br><span class="line">      .ignoreTablePrefix(ignorePrefix).ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line"></span><br><span class="line">// 3、生成文档配置（包含以下自定义版本号、描述等配置连接）</span><br><span class="line">Configuration config = Configuration.builder().version(&quot;1.0.0&quot;).description(&quot;数据库文档&quot;).dataSource(dataSource)</span><br><span class="line">      .engineConfig(engineConfig).produceConfig(processConfig).build();</span><br><span class="line"></span><br><span class="line">// 4、执行生成</span><br><span class="line">new DocumentationExecute(config).execute();</span><br></pre></td></tr></table></figure><blockquote><p>注：新版mysql驱动url后面需要加?serverTimezone&#x3D;UTC</p><p>否则会报：Failed to initialize pool: The server time zone value ‘�й���׼ʱ��’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the ‘serverTimezone’ configuration property)<br> to use a more specifc time zone value if you want to utilize time zone support.</p></blockquote><h4 id="Oracle数据库生成："><a href="#Oracle数据库生成：" class="headerlink" title="Oracle数据库生成："></a><strong>Oracle数据库生成：</strong></h4><blockquote><p>注意jdk8对应驱动  ojdbc8</p><p>相关依赖 orai18n 防止乱码</p></blockquote><p>注意以下依赖</p> <dependency>      <groupId>com.oracle.database.jdbc</groupId>      <artifactId>ojdbc8</artifactId>      <version>21.3.0.0</version>   </dependency> <dependency>      <groupId>cn.easyproject</groupId>      <artifactId>orai18n</artifactId>      <version>12.1.0.2.0</version>   </dependency><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 数据源</span><br><span class="line">HikariConfig hikariConfig = new HikariConfig();</span><br><span class="line">hikariConfig.setDriverClassName(&quot;oracle.jdbc.Driver&quot;);</span><br><span class="line">hikariConfig.setJdbcUrl(&quot;jdbc:oracle:thin:@172.0.0.1:1521:test&quot;);</span><br><span class="line">hikariConfig.setUsername(&quot;zhangsan&quot;);</span><br><span class="line">hikariConfig.setPassword(&quot;asdf2151#415&quot;);</span><br><span class="line">// 设置可以获取tables remarks信息</span><br><span class="line">hikariConfig.addDataSourceProperty(&quot;useInformationSchema&quot;, &quot;true&quot;);</span><br><span class="line">hikariConfig.setMinimumIdle(2);</span><br><span class="line">hikariConfig.setMaximumPoolSize(5);</span><br><span class="line">DataSource dataSource = new HikariDataSource(hikariConfig);</span><br><span class="line"></span><br><span class="line">// 1、生成文件配置</span><br><span class="line">EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">      // 生成文件路径</span><br><span class="line">      .fileOutputDir(&quot;D:\\test01&quot;)</span><br><span class="line">      // 打开目录</span><br><span class="line">      .openOutputDir(false)</span><br><span class="line">      // 文件类型</span><br><span class="line">      .fileType(EngineFileType.HTML)</span><br><span class="line">      // 生成模板实现</span><br><span class="line">      .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"></span><br><span class="line">// 忽略表名</span><br><span class="line">List&lt;String&gt; ignoreTableName = Arrays.asList(&quot;test&quot;);</span><br><span class="line">// 忽略表前缀</span><br><span class="line">List&lt;String&gt; ignorePrefix = Arrays.asList(&quot;test_&quot;, &quot;test&quot;);</span><br><span class="line">// 忽略表后缀</span><br><span class="line">List&lt;String&gt; ignoreSuffix = Arrays.asList(&quot;_bak&quot;, &quot;_tmp&quot;);</span><br><span class="line"></span><br><span class="line">// 2、配置想要忽略的表</span><br><span class="line">ProcessConfig processConfig = ProcessConfig.builder().ignoreTableName(ignoreTableName)</span><br><span class="line">      .ignoreTablePrefix(ignorePrefix).ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line"></span><br><span class="line">// 3、生成文档配置</span><br><span class="line">Configuration config = Configuration.builder().version(&quot;1.0.0&quot;).description(&quot;数据库文档&quot;).dataSource(dataSource)</span><br><span class="line">      .engineConfig(engineConfig).produceConfig(processConfig).build();</span><br><span class="line"></span><br><span class="line">// 4、执行生成</span><br><span class="line">new DocumentationExecute(config).execute();</span><br></pre></td></tr></table></figure><p>执行后生成html文档部分如下 ：</p><p><strong>表名：sys_log</strong></p><p>说明：日志表</p><p>数据列：</p><table><thead><tr><th>序号</th><th>名称</th><th>数据类型</th><th>长度</th><th>小数位</th><th>允许空值</th><th>主键</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>bigint</td><td>19</td><td>0</td><td>N</td><td>Y</td><td></td><td>ID</td></tr><tr><td>2</td><td>log_type</td><td>varchar</td><td>50</td><td>0</td><td>N</td><td>N</td><td></td><td>日志类型</td></tr><tr><td>3</td><td>create_user_code</td><td>varchar</td><td>64</td><td>0</td><td>N</td><td>N</td><td></td><td>创建用户编码</td></tr><tr><td>4</td><td>create_user_name</td><td>varchar</td><td>100</td><td>0</td><td>N</td><td>N</td><td></td><td>创建用户名称</td></tr><tr><td>5</td><td>create_date</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>创建时间</td></tr><tr><td>6</td><td>request_uri</td><td>varchar</td><td>500</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求URI</td></tr><tr><td>7</td><td>request_method</td><td>varchar</td><td>10</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求方式</td></tr><tr><td>8</td><td>request_params</td><td>text</td><td>65535</td><td>0</td><td>Y</td><td>N</td><td></td><td>请求参数</td></tr><tr><td>9</td><td>request_ip</td><td>varchar</td><td>20</td><td>0</td><td>N</td><td>N</td><td></td><td>请求IP</td></tr><tr><td>10</td><td>server_address</td><td>varchar</td><td>50</td><td>0</td><td>N</td><td>N</td><td></td><td>请求服务器地址</td></tr><tr><td>11</td><td>is_exception</td><td>char</td><td>1</td><td>0</td><td>Y</td><td>N</td><td></td><td>是否异常</td></tr><tr><td>12</td><td>exception_info</td><td>text</td><td>65535</td><td>0</td><td>Y</td><td>N</td><td></td><td>异常信息</td></tr><tr><td>13</td><td>start_time</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>开始时间</td></tr><tr><td>14</td><td>end_time</td><td>datetime</td><td>19</td><td>0</td><td>N</td><td>N</td><td></td><td>结束时间</td></tr><tr><td>15</td><td>execute_time</td><td>int</td><td>10</td><td>0</td><td>Y</td><td>N</td><td></td><td>执行时间</td></tr><tr><td>16</td><td>user_agent</td><td>varchar</td><td>500</td><td>0</td><td>Y</td><td>N</td><td></td><td>用户代理</td></tr><tr><td>17</td><td>device_name</td><td>varchar</td><td>100</td><td>0</td><td>Y</td><td>N</td><td></td><td>操作系统</td></tr><tr><td>18</td><td>browser_name</td><td>varchar</td><td>100</td><td>0</td><td>Y</td><td>N</td><td></td><td>浏览器名称</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Stream流式处理集合-去重排序分组转换操作</title>
      <link href="/2019/03/21/Java%E4%B9%8BStream%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88-%E5%8E%BB%E9%87%8D%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/21/Java%E4%B9%8BStream%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88-%E5%8E%BB%E9%87%8D%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Stream流式处理集合-去重排序分组转换操作"><a href="#Java-Stream流式处理集合-去重排序分组转换操作" class="headerlink" title="Java Stream流式处理集合  去重排序分组转换操作"></a>Java Stream流式处理集合  去重排序分组转换操作</h2><p> 工作中Stream流操作集合 很方便快捷，以下是记录常用的去重排序分组转换操作 </p><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><p>1.首先使用Integer 和String 类型集合 进行操作 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两组数据类型集合</span></span><br><span class="line">List&lt;Integer&gt; integers = Arrays.asList(<span class="number">12</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">List&lt;String&gt; strs = Arrays.asList(<span class="string">&quot;12&quot;</span>, <span class="string">&quot;23&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据去重</span></span><br><span class="line">integers.stream().distinct().forEach(System.out::println);</span><br><span class="line">strs.stream().distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据排序 默认正序</span></span><br><span class="line">integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"> strs.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒叙写法</span></span><br><span class="line"> integers.stream().sorted(Comparator.comparingInt(x-&gt;-x)).forEach(System.out::println);</span><br><span class="line"><span class="comment">//integers.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);</span></span><br><span class="line"> strs.stream().sorted(Collections.reverseOrder()).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>2.定义实体Person及组装数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chensan&quot;</span>, <span class="number">25</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhaosi&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhaosi&quot;</span>, <span class="number">40</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;liuliu&quot;</span>, <span class="number">22</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">23</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>按名字去重后展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Person::getName)))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)</p></blockquote><p>按名字 年龄去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(x -&gt; String.join(<span class="string">&quot;-&quot;</span>, x.getName(), String.valueOf(x.getAge())))))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><p>按名字 年龄 性别去重</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(x -&gt; String.join(<span class="string">&quot;-&quot;</span>, x.getName(), String.valueOf(x.getAge()), x.getSex()))))</span><br><span class="line">        , ArrayList::<span class="keyword">new</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>根据年龄排序 再根据名字排序 从小到大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge).thenComparing(Person::getName)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)</p></blockquote><p>根据年龄排序 再根据名字排序 从大到小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.reverseOrder())).forEach(System.out::println);</span><br><span class="line"><span class="comment">//list.stream().sorted(Comparator.comparing(Person::getAge).reversed()).forEach(System.out::println);</span></span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)</p></blockquote><p>当存在字段为null时，执行会报空指针异常，此时可用Comparator.nullsLast 或Comparator.nullsFirst 比较器 将null值数据放到最前或最后</p><p>如：添加 一组年龄为空的数据</p><blockquote><p>list.add(new Person(“ben”, null, “女”));</p></blockquote><p>根据年龄排序  存在age字段为空时 ，null值排在最前面 后根据age倒序展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Collections.reverseOrder()))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;ben, age&#x3D;null, sex&#x3D;女)<br>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)</p></blockquote><p>根据年龄排序  存在age字段为空时 ，null值排在最后面 后根据age倒序展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted(Comparator.comparing(Person::getAge,Comparator.nullsLast(Collections.reverseOrder()))).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)<br>Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男)<br>Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)<br>Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>Person(name&#x3D;ben, age&#x3D;null, sex&#x3D;女)</p></blockquote><p>获取年龄最大的人的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(list.stream().max(Comparator.comparing(Person::getAge)).orElse(<span class="keyword">new</span> <span class="title class_">Person</span>()).getName());</span><br></pre></td></tr></table></figure><h4 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h4><p>根据名字_性别 分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(x-&gt;x.getName()+&quot;_&quot;+x.getSex())).forEach((x,y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>lisi_男&#x3D;[Person(name&#x3D;lisi, age&#x3D;22, sex&#x3D;男)]<br>liuliu_女&#x3D;[Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)]<br>chensan_男&#x3D;[Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)]<br>zhaosi_男&#x3D;[Person(name&#x3D;zhaosi, age&#x3D;22, sex&#x3D;男), Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)]<br>lisi_女&#x3D;[Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女), Person(name&#x3D;lisi, age&#x3D;23, sex&#x3D;女)]<br>zhangsan_男&#x3D;[Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)]</p></blockquote><p>根据姓名 统计数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(Person::getName,Collectors.counting())).forEach((x, y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;1<br>lisi&#x3D;3<br>zhaosi&#x3D;2<br>zhangsan&#x3D;1<br>liuliu&#x3D;1</p></blockquote><p>根据名字分组 统计年龄总和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.groupingBy(Person::getName, Collectors.summingInt(Person::getAge))).forEach((x,y)-&gt; System.out.println(x+&quot;=&quot;+y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;25<br>lisi&#x3D;69<br>zhaosi&#x3D;62<br>zhangsan&#x3D;20<br>liuliu&#x3D;22</p></blockquote><h4 id="转换Map"><a href="#转换Map" class="headerlink" title="转换Map"></a>转换Map</h4><p>按名字作为键  值为年龄最大的 转换成Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName,Function.identity(), BinaryOperator.maxBy(Comparator.comparing(Person::getAge)))).forEach((x,y)-&gt;</span><br><span class="line">                System.out.println(x+&quot;=&quot;+y)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;Person(name&#x3D;chensan, age&#x3D;25, sex&#x3D;男)<br>lisi&#x3D;Person(name&#x3D;lisi, age&#x3D;24, sex&#x3D;女)<br>zhaosi&#x3D;Person(name&#x3D;zhaosi, age&#x3D;40, sex&#x3D;男)<br>zhangsan&#x3D;Person(name&#x3D;zhangsan, age&#x3D;20, sex&#x3D;男)<br>liuliu&#x3D;Person(name&#x3D;liuliu, age&#x3D;22, sex&#x3D;女)</p></blockquote><p>按名字作为键 值为性别以分号追加展示  转换成Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName, Person::getSex, (m, n) -&gt; m + &quot;;&quot; + n)).forEach((x, y) -&gt; System.out.println(x + &quot;=&quot; + y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>chensan&#x3D;男<br>lisi&#x3D;男;女;女<br>zhaosi&#x3D;男;男<br>zhangsan&#x3D;男<br>liuliu&#x3D;女</p></blockquote><p>注：如果使用两个参数的toMap方法时，若存在键重复时会报 “ Duplicate key ” 错 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toMap(Person::getName, Person::getSex)).forEach((x, y) -&gt; System.out.println(x + &quot;=&quot; + y));</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>Exception in thread “main” java.lang.IllegalStateException: Duplicate key zhaosi (attempted merging values 男 and 男)<br>    at java.base&#x2F;java.util.stream.Collectors.duplicateKeyException(Collectors.java:133)<br>    at java.base&#x2F;java.util.stream.Collectors.lambda$uniqKeysMapAccumulator$1(Collectors.java:180)<br>    at java.base&#x2F;java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)<br>    at java.base&#x2F;java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)<br>    at java.base&#x2F;java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)<br>    at java.base&#x2F;java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br>    at java.base&#x2F;java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)</p></blockquote><h3 id="Java8相关资料参考文档："><a href="#Java8相关资料参考文档：" class="headerlink" title="Java8相关资料参考文档："></a>Java8相关资料参考文档：</h3><p>Java 8 教程汇总 <a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html">https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</a></p><p>Java8简明教程 <a href="https://wizardforcel.gitbooks.io/modern-java">https://wizardforcel.gitbooks.io/modern-java</a></p><p>Java8新特性探究 <a href="https://wizardforcel.gitbooks.io/java8-new-features/content/">https://wizardforcel.gitbooks.io/java8-new-features/content/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用HtmlUnit 爬取网站壁纸资源</title>
      <link href="/2019/03/15/%E4%BD%BF%E7%94%A8HtmlUnit%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%A3%81%E7%BA%B8/"/>
      <url>/2019/03/15/%E4%BD%BF%E7%94%A8HtmlUnit%E7%88%AC%E5%8F%96%E7%BD%91%E7%AB%99%E5%A3%81%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="HtmlUnit-爬取网站壁纸资源"><a href="#HtmlUnit-爬取网站壁纸资源" class="headerlink" title="HtmlUnit 爬取网站壁纸资源"></a>HtmlUnit 爬取网站壁纸资源</h2><p><em>当你想一些资源又无从找时，那么就可以在别人网中爬取。OωO</em></p><p><strong>HtmlUnit 官方简介：</strong></p><blockquote><p>HtmlUnit 是“Java 程序的无 GUI 浏览器”。它对 HTML 文档进行建模并提供一个 API，允许您调用页面、填写表单、单击链接等……就像您在“普通”浏览器中所做的一样。</p><p>它具有相当好的 JavaScript 支持（不断改进），甚至能够使用相当复杂的 AJAX 库，根据使用的配置模拟 Chrome、Firefox 或 Internet Explorer。</p><p>它通常用于测试目的或从网站检索信息。</p></blockquote><p>总之  htmlunit可以模拟浏览器执行，不会正真打开一个浏览器界面，是<a href="https://so.csdn.net/so/search?q=webdriver&spm=1001.2101.3001.7020">webdriver</a>的轻量级实现。 可用于获取网站信息。</p><p>相比其他java中支持爬虫的框架（WebMagic、Spider、Jsoup），HtmlUnit运行速度快，操作元素API丰富。<a href="https://htmlunit.sourceforge.io/apidocs/index.html">官方API文档</a></p><h4 id="爬取乌云高清壁纸站-风景壁纸类壁纸"><a href="#爬取乌云高清壁纸站-风景壁纸类壁纸" class="headerlink" title="爬取乌云高清壁纸站 风景壁纸类壁纸"></a>爬取乌云高清壁纸站 <em>风景壁纸</em>类壁纸</h4><p>1.创建WebClient浏览器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造创建 默认使用谷歌浏览器</span></span><br><span class="line"> <span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> public WebClient() {<br>        this(BrowserVersion.getDefault());<br>    }</p><p> &#x2F;** Latest Chrome. *&#x2F;<br>    public static final BrowserVersion CHROME &#x3D; new BrowserVersion(103, “Chrome”);</p></blockquote><p>2.浏览器设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置支持AJAX</span></span><br><span class="line">        webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">        <span class="comment">////开启页面重定向</span></span><br><span class="line">        webClient.getOptions().setRedirectEnabled(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//关闭ssl安全访问</span></span><br><span class="line">        webClient.getOptions().setUseInsecureSSL(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//关闭异常抛出</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//忽略解析 css js false</span></span><br><span class="line">        webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">        webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置是否允许本机 ActiveX。默认值为假。请注意，除非您完全信任 JavaScript 代码，否则绝不应该允许运行本机 ActiveX 组件，因为它不受 Java 虚拟机控制</span></span><br><span class="line">        webClient.getOptions().setActiveXNative(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获取HtmlPage信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String baseUrl = &quot;https://www.obzhi.com/category/fengjingbizhi&quot;;  </span></span><br><span class="line">page = webClient.getPage(baseUrl);</span><br></pre></td></tr></table></figure><p>4.从浏览器网站页面F12 获取图像元素定位，获取HtmlImage集合对象</p><p>以下使用xpath 语法获取，具体可参考<a href="https://www.runoob.com/xpath/xpath-syntax.html">xpath语法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;HtmlImage&gt; l=  page.getByXPath(<span class="string">&quot;//div[@class=&#x27;thumbnail&#x27;]/a/img&quot;</span>);</span><br></pre></td></tr></table></figure><p>5.遍历截取图片路径信息及下载本地</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (HtmlImage image : l) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> StringUtils.substringAfterLast(image.getSrcAttribute(), <span class="string">&quot;src=&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">douwnUrl</span> <span class="operator">=</span> StringUtils.substringBefore(sub, <span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;http:&quot;</span>, <span class="string">&quot;https:&quot;</span>);</span><br><span class="line">    System.out.println(douwnUrl);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"> HttpUtil.download(douwnUrl, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://obzhi//&quot;</span> +StringUtils.substringAfterLast(douwnUrl,<span class="string">&quot;/&quot;</span>)), <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打印获取url路径示例:</p><blockquote><p><a href="https://www.obzhi.com/wp-content/uploads/2016/09/yujia.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/yujia.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/huanghun.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/huanghun.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/dahaichonglang.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/dahaichonglang.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/haibianbieshu.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/haibianbieshu.jpg</a><br><a href="https://www.obzhi.com/wp-content/uploads/2016/09/senlindahai.jpg">https://www.obzhi.com/wp-content/uploads/2016/09/senlindahai.jpg</a></p><p>……</p></blockquote><p><strong>注：部分url 地址需 https:才能访问 所以这里全替换成https:了</strong></p><p>6.完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">webClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebClient</span>();</span><br><span class="line">webClient.setAjaxController(<span class="keyword">new</span> <span class="title class_">NicelyResynchronizingAjaxController</span>());</span><br><span class="line">webClient.getOptions().setRedirectEnabled(<span class="literal">true</span>);</span><br><span class="line">webClient.getOptions().setUseInsecureSSL(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setThrowExceptionOnScriptError(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setCssEnabled(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setJavaScriptEnabled(<span class="literal">false</span>);</span><br><span class="line">webClient.getOptions().setActiveXNative(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//obzhi</span></span><br><span class="line"><span class="type">String</span> <span class="variable">baseUrl</span> <span class="operator">=</span> <span class="string">&quot;https://www.obzhi.com/category/fengjingbizhi&quot;</span>;</span><br><span class="line">HtmlPage page;</span><br><span class="line"><span class="comment">//尾页数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">endPage</span> <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; endPage; i++) &#123;</span><br><span class="line">   baseUrl= i&gt;<span class="number">1</span> ? baseUrl.concat(<span class="string">&quot;//page/&quot;</span>) + i : baseUrl;</span><br><span class="line">    page = webClient.getPage(baseUrl);</span><br><span class="line">    List&lt;HtmlImage&gt; l=  page.getByXPath(<span class="string">&quot;//div[@class=&#x27;thumbnail&#x27;]/a/img&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (HtmlImage image : l) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> StringUtils.substringAfterLast(image.getSrcAttribute(), <span class="string">&quot;src=&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">douwnUrl</span> <span class="operator">=</span> StringUtils.substringBefore(sub, <span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;http:&quot;</span>, <span class="string">&quot;https:&quot;</span>);</span><br><span class="line">        System.out.println(douwnUrl);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">     HttpUtil.download(douwnUrl, <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://obzhi//&quot;</span> +StringUtils.substringAfterLast(douwnUrl,<span class="string">&quot;/&quot;</span>)), <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;图片不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HtmlUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HtmlUnit </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 菲波那切数列之递归迭代算法求值</title>
      <link href="/2018/09/24/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E6%B1%82%E8%8F%B2%E6%B3%A2%E9%82%A3%E5%88%87%E6%95%B0%E5%88%97%E5%80%BC/"/>
      <url>/2018/09/24/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E6%B1%82%E8%8F%B2%E6%B3%A2%E9%82%A3%E5%88%87%E6%95%B0%E5%88%97%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55-、……"><a href="#斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55-、……" class="headerlink" title="斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55 、……"></a>斐波那契数列，又称黄金分割数列，以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、55 、……</h2><h3 id="数列从第3项开始，每一项都等于前两项之和。"><a href="#数列从第3项开始，每一项都等于前两项之和。" class="headerlink" title="数列从第3项开始，每一项都等于前两项之和。"></a><code>数列从第3项开始，每一项都等于前两项之和。</code></h3><p>求该数列的第N项数值</p><h4 id="1-递归方法"><a href="#1-递归方法" class="headerlink" title="1.递归方法"></a>1.递归方法</h4><p>递归重要的规则：当满足一定条件时 需要终止递归调用。否则陷入调用死循环</p><p>此数列 当x&#x3D;1 或 x&#x3D;2 时 可以当做满足 跳出递归条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//x 表示第几个数</span><br><span class="line">f(x)=f(x-1)+f(x-2) </span><br><span class="line">f(x-1)=f(x-2)+f(x-3)</span><br><span class="line">f(x-2)=f(x-3)+f(x-4)</span><br><span class="line">......</span><br><span class="line">当x-n=1 或 2时 直接返回1</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">publix <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">t1</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span> || x == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t1(x - <span class="number">1</span>) + t1(x - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-迭代方法"><a href="#2-迭代方法" class="headerlink" title="2.迭代方法"></a>2.迭代方法</h4><p>如：</p><p>1 1 2 3 5 8  m n  result&#x3D;m+n<br>1  result &#x3D;  m+n &#x3D; 0+1  可以看做 0 + 1<br>2 result &#x3D;  m+n &#x3D; 1+1<br>3 result&#x3D; m+n 1+2<br>5 result &#x3D;m+n 2+3<br>8 result &#x3D; m+ n 3+5<br>…..</p><blockquote><p> 可以看出 当前组数m的值 是上一组数的n;上一组数的 result 是下一组数的n</p></blockquote><p>即 如果result代表当前项的斐波那契数，m代表前两项的，n代表前一项，我们在每一次计算完后将n的值赋给m，<br>将result的值赋给n，使得我们可以一项一项的算出斐波那契数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">publix <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">t2</span><span class="params">()</span>&#123; </span><br><span class="line"><span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> result=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line"> <span class="comment">//count 1 开始 ，1 时 不进循环 直接返回1</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; x) &#123;</span><br><span class="line"></span><br><span class="line">    result = m+n;</span><br><span class="line">    m = n;</span><br><span class="line">   n = result;</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效率比较：</p><p>递归效率慢  它会消耗了大量的内存与时间，当参数值过大时， 会计算很长的时间</p><p>迭代求值效率快 </p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StopWatch</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">time.start(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">System.out.println(t1(<span class="number">20</span>));</span><br><span class="line">time.stop();</span><br><span class="line">time.start(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">System.out.println(t2(<span class="number">20</span>));</span><br><span class="line">time.stop();</span><br><span class="line">System.out.println(time.prettyPrint());</span><br></pre></td></tr></table></figure><p>测试结果：</p><blockquote><p>6765<br>6765<br>StopWatch ‘’: running time &#x3D; 489800 ns</p><hr><h2 id="ns-Task-name"><a href="#ns-Task-name" class="headerlink" title="ns         %     Task name"></a>ns         %     Task name</h2><p>000463500  095%  t1<br>000026300  005%  t2</p></blockquote><p>结果纳秒统计 效率 t2迭代方法 比t1递归快的多</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 防火墙常见操作命令</title>
      <link href="/2018/09/23/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/23/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux-防火墙操作"><a href="#Linux-防火墙操作" class="headerlink" title="Linux 防火墙操作"></a>Linux 防火墙操作</h3><h5 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h5><p>systemctl status firewalld</p><h5 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h5><p>systemctl start firewalld</p><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><p>systemctl stop firewalld</p><h5 id="永久关闭防火墙"><a href="#永久关闭防火墙" class="headerlink" title="永久关闭防火墙"></a>永久关闭防火墙</h5><p>systemctl disabled firewalld</p><h5 id="开放指定端口"><a href="#开放指定端口" class="headerlink" title="开放指定端口"></a>开放指定端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>命令含义： –zone #作用域</p><p> –add-port&#x3D;8080&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议</p><p> –permanent  #永久生效，没有此参数重启后失效</p></blockquote><h5 id="关闭指定端口"><a href="#关闭指定端口" class="headerlink" title="关闭指定端口"></a>关闭指定端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 查看开放的端口</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h5 id="重新加载防火墙配置"><a href="#重新加载防火墙配置" class="headerlink" title="重新加载防火墙配置"></a>重新加载防火墙配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h5><p>netstat -ntlp   &#x2F;&#x2F;查看当前所有tcp端口·</p><p>netstat -ntulp |grep 8080 &#x2F;&#x2F;查看所有8080端口使用情况·</p><p>lsof -i:8080 </p><h5 id="查看进程信息"><a href="#查看进程信息" class="headerlink" title="查看进程信息"></a>查看进程信息</h5><p>ps -ef |grep tomcat</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令(二)</title>
      <link href="/2018/09/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/"/>
      <url>/2018/09/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h4 id="du查看文件和目录占用的磁盘大小"><a href="#du查看文件和目录占用的磁盘大小" class="headerlink" title="du查看文件和目录占用的磁盘大小"></a>du查看文件和目录占用的磁盘大小</h4><blockquote><p>du : disk usage 磁盘占用情况</p></blockquote><p>命令： du 目录或文件 显示目录下每个子目录的磁盘使用情况</p><p>查看&#x2F;home 各目录文件内存大小</p><p>du -ah &#x2F;home</p><blockquote><p>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla&#x2F;extensions<br>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla&#x2F;plugins<br>0    &#x2F;home&#x2F;zhangkejiu&#x2F;.mozilla<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bash_logout<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bash_profile<br>4.0K    &#x2F;home&#x2F;zhangkejiu&#x2F;.bashrc<br>……<br>0    &#x2F;home&#x2F;kejiu&#x2F;.config<br>4.0K    &#x2F;home&#x2F;kejiu&#x2F;.bash_history<br>20K    &#x2F;home&#x2F;kejiu<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla&#x2F;extensions<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla&#x2F;plugins<br>0    &#x2F;home&#x2F;xingxing&#x2F;.mozilla<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bash_logout<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bash_profile<br>4.0K    &#x2F;home&#x2F;xingxing&#x2F;.bashrc<br>12K    &#x2F;home&#x2F;xingxing<br>60K    &#x2F;home</p></blockquote><p>-h 以较为容易阅读方式格式显示 如： ls -lh </p><p>-a 不仅查看子目录大小 还包括文件</p><p>-c 显示所有文件和子目录大小后 显示总和</p><p>-s 只显示总和</p><p>–max-depth&#x3D;n  子目录深度第n层</p><p>只显示&#x2F;root 下占用大小</p><p>du -sh &#x2F;root</p><blockquote><p>94M    &#x2F;root</p></blockquote><h4 id="df-查看磁盘空间使用情况"><a href="#df-查看磁盘空间使用情况" class="headerlink" title="df 查看磁盘空间使用情况"></a>df 查看磁盘空间使用情况</h4><p>命令： df -h</p><p>打印输出：</p><blockquote><p>文件系统        容量  已用  可用 已用% 挂载点<br>devtmpfs        2.0G     0  2.0G    0% &#x2F;dev<br>tmpfs           2.0G     0  2.0G    0% &#x2F;dev&#x2F;shm<br>tmpfs           2.0G   21M  1.9G    2% &#x2F;run<br>tmpfs           2.0G     0  2.0G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>&#x2F;dev&#x2F;sda3        25G  8.2G   17G   33% &#x2F;<br>&#x2F;dev&#x2F;sda1      1014M  169M  846M   17% &#x2F;boot<br>tmpfs           394M   36K  394M    1% &#x2F;run&#x2F;user&#x2F;0</p></blockquote><h4 id="lsblk-查看设备挂载情况"><a href="#lsblk-查看设备挂载情况" class="headerlink" title="lsblk 查看设备挂载情况"></a>lsblk 查看设备挂载情况</h4><p>-f 查看设备挂载详细信息</p><p>命令： lsblk </p><p>打印输出：</p><blockquote><p>NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda      8:0    0   30G  0 disk<br>├─sda1   8:1    0    1G  0 part &#x2F;boot<br>├─sda2   8:2    0    4G  0 part [SWAP]<br>└─sda3   8:3    0   25G  0 part &#x2F;<br>sr0     11:0    1  4.4G  0 rom  </p></blockquote><h4 id="systemctl-CentOS7版本"><a href="#systemctl-CentOS7版本" class="headerlink" title="systemctl (CentOS7版本)"></a>systemctl (CentOS7版本)</h4><p>命令： systemctl start | stop | restart| status 服务名</p><p>查看服务方法 ： cd  &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system   </p><p>ls -al</p><h4 id="ps查看当前服务进程"><a href="#ps查看当前服务进程" class="headerlink" title="ps查看当前服务进程"></a>ps查看当前服务进程</h4><p>ps aux | grep xxx  查看系统中所有进程</p><p>ps -ef |grep xxx 查看子父进程之间的关系</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>a</td><td>列出带有终端的所有用户进程</td></tr><tr><td>x</td><td>列出当前用户的所有进程，包括没有终端的进程</td></tr><tr><td>u</td><td>面向友好展示</td></tr><tr><td>-e</td><td>列出所有进程</td></tr><tr><td>-f</td><td>显示完整格式的进程列表</td></tr><tr><td>-u</td><td>列出某个用户关联的所有进程</td></tr></tbody></table><p>查看远程登陆进程</p><p>ps -ef | grep sshd</p><h4 id="kill终止进程"><a href="#kill终止进程" class="headerlink" title="kill终止进程"></a>kill终止进程</h4><p>kill 进程号</p><p>kill -l </p><p>-9  强迫进程立刻停止 (SIGKILL)</p><p>强制终止PID为9834的进程</p><p>命令： kill -9 9834 </p><p>终止所有tomcat相关进程</p><p>killall  tomcat</p><h4 id="top实时监控系统进程状态"><a href="#top实时监控系统进程状态" class="headerlink" title="top实时监控系统进程状态"></a>top实时监控系统进程状态</h4><p>top 参数</p><p>-d 每隔几秒更新 默认三秒</p><p>-i 不显示任何闲置或僵死进程</p><p>-p 通过指定PID 查看对应进程</p><p> top -p 5854 查看PID 5854</p><blockquote><p>按k键 可以kill 对应pid   (9)</p></blockquote><h4 id="netstat-显示网络状态和端口占用信息"><a href="#netstat-显示网络状态和端口占用信息" class="headerlink" title="netstat 显示网络状态和端口占用信息"></a>netstat 显示网络状态和端口占用信息</h4><p>netstat -anp | grep 进程号 查看该进程网络信息</p><p>netstat -nlp | grep 端口号 查看网络端口占用情况</p><p>nestat -tunlp 查看当前所有tcp端口</p><p>查看3306端口是否被占用   （lsof -i:3306）</p><blockquote><p> netstat -nlp |grep 3306</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有正在监听和未监听的套接字</td></tr><tr><td>-n</td><td>拒接显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出在监听的服务状态</td></tr><tr><td>-p</td><td>显示哪个进程在调用</td></tr></tbody></table><h4 id="RPM软件包管理命令"><a href="#RPM软件包管理命令" class="headerlink" title="RPM软件包管理命令"></a>RPM软件包管理命令</h4><p>1.rpm 查询</p><p>rmp -qa 查询所安装的所有rpm软件包</p><p>例：查询 firefox 软件安装</p><blockquote><p>  rpm -qa |grep firefox</p></blockquote><p>2.rpm 卸载</p><p>rpm -e RPM软件包</p><p>rpm -e –nodeps RPM 软件包  –nodeps 卸载前不检查依赖</p><p>例：卸载firefox</p><blockquote><p>rpm -e firefox</p></blockquote><p>3.rpm安装</p><p>例：安装firefox</p><blockquote><p>rpm -ivh firefox</p></blockquote><p>-i 安装</p><p>-v 显示详细信息</p><p>-h 进度条</p><p>–nodeps 安装前不检查依赖</p><h4 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h4><p>yum基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次性安装所有依赖的软件包</p><blockquote><p>类似于maven</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期缓存（类似mvn clean）</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table><p>1.查找可安装的firefox包</p><p>yum list | grep firefox</p><blockquote><p>firefox.x86_64                            68.10.0-1.el7.centos         @anaconda<br>firefox.i686                              91.12.0-2.el7.centos         updates<br>firefox.x86_64                            91.12.0-2.el7.centos         updates  </p></blockquote><p>第一个表示已安装版本 以下两个表示可更新版本</p><p>2.删除老版本firefox</p><p> yum remove firefox</p><p>3.安装Firefox</p><p>yum -y install firefox   </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令(一)</title>
      <link href="/2018/09/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/"/>
      <url>/2018/09/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h4 id="find-查找文件或目录命令"><a href="#find-查找文件或目录命令" class="headerlink" title="find 查找文件或目录命令"></a>find 查找文件或目录命令</h4><blockquote><p>find 命令将从指定目录你向下递归比哪里各个子目录 将满足的查询条件的文件显示出来</p></blockquote><ul><li><p>-name &lt;查询方式&gt; 命令：  </p><p>查找指定文件名</p><ol><li><p>find -name info  查找系统下所有info文件</p></li><li><p>find &#x2F;root -name 2.txt 查找root下 所有 2.txt文件</p></li><li><p>find &#x2F;root -name “*.exe*”  查找root下 所有 exe后缀文件</p></li><li></li></ol></li><li><p>-user &lt;用户名&gt; 命令：passwd kejiu</p><p>查找属于指定用户名所有文件</p><p>1.find &#x2F;home -user kejiu 查找kejiu用户下的文件</p></li><li><p>-size &lt;文件大小 &gt;命令：id kejiu</p><p>查找按照指定文件大小查找文件</p><p>1.find &#x2F;root -size +10M 查找root下10M以上文件</p></li></ul><h4 id="locate-查找文件路径"><a href="#locate-查找文件路径" class="headerlink" title="locate 查找文件路径"></a>locate 查找文件路径</h4><blockquote><p>locate命令 利用事先建立的系统中所有文件名称和路径的locate数据库实现快速查找文件，locate无需遍历整个文件系统，查询速度比较快。</p></blockquote><p>注意：为了保证查询文件结果的准确性，需要定期更新locate</p><p><code>updatedb</code></p><p>1.locate  java查找包含java的文件或路径名</p><p>例：</p><blockquote><p>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Europe&#x2F;Zaporozhye<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Europe&#x2F;Zurich<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Chagos<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Christmas<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Cocos<br>&#x2F;usr&#x2F;share&#x2F;javazi&#x2F;Indian&#x2F;Kerguelen<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;tnameserv-java-1.7.0-openjdk-1.7.0.261-2.6.22.2.el7_8.x86_64.1.gz<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;unpack200-java-1.8.0-openjdk-1.8.0.262.b10-1.el7.x86_64.1.gz<br>&#x2F;usr&#x2F;share&#x2F;man&#x2F;pl&#x2F;man1&#x2F;javaws.1.gz<br>&#x2F;usr&#x2F;share&#x2F;maven-fragments&#x2F;javapackages-depmap.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java-keystore.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java-pack200.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;application&#x2F;x-java.xml<br>&#x2F;usr&#x2F;share&#x2F;mime&#x2F;text&#x2F;x-java.xml</p></blockquote><h4 id="grep-过滤查找-“-”-管道符"><a href="#grep-过滤查找-“-”-管道符" class="headerlink" title="grep 过滤查找 “|” 管道符"></a>grep 过滤查找 “|” 管道符</h4><ol><li>-n  显示匹配行和行号</li></ol><p>命令： grep -n hello hello.txt  在hello.txt 中查找hello 显示内容及行号</p><ol start="2"><li>管道符 将前一个命令的处理结果传输给后面命令处理</li></ol><p>命令： 查找某文件在第几行 ls | grep -n hello</p><h4 id="压缩和解压命令"><a href="#压缩和解压命令" class="headerlink" title="压缩和解压命令"></a>压缩和解压命令</h4><p>1.gzip&#x2F;gunzip压缩</p><p>命令： gzip 压缩文件 （压缩文件或目录）</p><p>命令：gunzip 文件.gz （ 解压命令）</p><blockquote><p>注意：</p><p>只能压缩文件不能压缩目录</p><p>不保留原来的文件</p><p>同时多个文件压缩会产生多个压缩包</p></blockquote><p>2.zip&#x2F;unzip压缩</p><p>命令： zip 压缩文件 （只能将文件压缩成.gz文件）</p><p>命令：unzip 文件.zip （ 解压命令）</p><p>zip</p><p>-r 压缩目录</p><p><code>将/root目录下的文件 压缩成myroot.zip</code></p><p><code>zip -r myroot.zip /root</code></p><p>unzip</p><p>-d 指定压缩存放目录</p><p>将myroot.zip解压至&#x2F;etc目录下</p><p>unzip -d &#x2F;etc&#x2F; myroot.zip</p><p>3.tar打包</p><p>命令 tar [参数] xx.tar.gz  【文件】   (将文件打包压缩，压缩后的文件格式.tar.gz)</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p>将1.txt 2.txt 3.txt 文件 压缩成1.tar.gz</p><p>tar -zcvf 1.tar.gz 1.txt 2.txt 3.txt  </p><p>将1.tar.gz 解压至 &#x2F;home</p><p>tar -zxvf 1.tar.gz  -C &#x2F;home</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java LocalDate与Date相互转换</title>
      <link href="/2018/09/14/Java%E4%B9%8BLocalDate%E4%B8%8EDate%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/09/14/Java%E4%B9%8BLocalDate%E4%B8%8EDate%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="有时为了兼容-Date-类型需要进行转换。"><a href="#有时为了兼容-Date-类型需要进行转换。" class="headerlink" title="有时为了兼容 Date 类型需要进行转换。"></a>有时为了兼容 Date 类型需要进行转换。</h2><h3 id="工作中，有时为了兼容-Date-类型字段需要进行类型转换。"><a href="#工作中，有时为了兼容-Date-类型字段需要进行类型转换。" class="headerlink" title="工作中，有时为了兼容 Date 类型字段需要进行类型转换。"></a>工作中，有时为了兼容 Date 类型字段需要进行类型转换。</h3><blockquote><p>将LocalDate、LocalDateTime与Date之间相互转换方法记录一下：</p></blockquote><h5 id="LocalDateTime-转-Date类型"><a href="#LocalDateTime-转-Date类型" class="headerlink" title="LocalDateTime 转 Date类型"></a>LocalDateTime 转 Date类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static Date toDate(LocalDateTime localDateTime) &#123;</span><br><span class="line">    ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.systemDefault());</span><br><span class="line">    return Date.from(zonedDateTime.toInstant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LocalDate-转-Date-类型"><a href="#LocalDate-转-Date-类型" class="headerlink" title="LocalDate 转 Date 类型"></a>LocalDate 转 Date 类型</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static Date toDate(LocalDate localDate) &#123;</span><br><span class="line">    ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line">    return Date.from(localDate.atStartOfDay(zoneId).toInstant());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注：LocalDate 会截去 时分秒数据</code></p><h5 id="Date-转-LocalDate"><a href="#Date-转-LocalDate" class="headerlink" title="Date 转 LocalDate"></a>Date 转 LocalDate</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDate toLocalDate(Date date) &#123;</span><br><span class="line">    Instant instant = date.toInstant();</span><br><span class="line">    return LocalDateTime.ofInstant(instant, ZoneId.systemDefault()).toLocalDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Date-转LocalDateTime"><a href="#Date-转LocalDateTime" class="headerlink" title="Date 转LocalDateTime"></a>Date 转LocalDateTime</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime toLocalDateTime(Date date) &#123;</span><br><span class="line">    Instant instant = date.toInstant();</span><br><span class="line">    return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户文件权限管理</title>
      <link href="/2018/09/14/Linux%E4%B9%8B%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/14/Linux%E4%B9%8B%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="常用用户管理操作命令"><a href="#常用用户管理操作命令" class="headerlink" title="常用用户管理操作命令"></a>常用用户管理操作命令</h2><ul><li><p>新建用户 kejiu  命令： useradd kejiu</p></li><li><p>设置密码 命令：passwd kejiu</p></li><li><p>查找是否存在用户kejiu 命令：id kejiu</p></li><li><p>查看创建了哪些用户 命令: cat &#x2F;etc&#x2F;passwd (可在&#x2F;etc&#x2F;passwd文件内查看用户信息)</p></li><li><p>切换用户 命令：su 用户 </p></li><li><p>删除用户 命令：userdel  用户 （主目录不会被删除，需要删除的话 手动rm -rf  主目录名）或者 userdel -r ,多加个-r 参数 删除用户时会自动删除用户的主目录</p></li></ul><h3 id="临时获取root权限"><a href="#临时获取root权限" class="headerlink" title="临时获取root权限"></a>临时获取root权限</h3><p>  sudo</p><p>例： ls查看root用户下&#x2F;root文件* 提示无操作权限*</p><p>sudo ls</p><blockquote><p>提示：kejiu 不在 sudoers 文件中。此事将被报告。</p></blockquote><p>出现以上提示</p><p>需要使用root账户在 &#x2F;etc&#x2F;sudoers 文件中配置上可以sudo执行的用户信息</p><p>如在root ALL&#x3D;(ALL) ALL下添加kejiu 操作权限信息：</p><blockquote><p>Allow root to run any commands anywhere</p><p>root    ALL&#x3D;(ALL)     ALL</p><p><strong>kejiu    ALL&#x3D;(ALL)     ALL</strong></p></blockquote><h3 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h3><p>每一个用户都对应一个用户组，创建用户时 默认分配组名为自己</p><blockquote><p>uid&#x3D;1002(kejiu) gid&#x3D;1002(kejiu) 组&#x3D;1002(kejiu)</p></blockquote><p>用户组的操作是基于&#x2F;etc&#x2F;group文件的修改</p><ul><li><p>新增组 命令：groupadd 组名</p></li><li><p>删除组 命令：groupdel 组名</p></li><li><p>将用户kejiu 添加至haha  命令： usermod -g haha kejiu</p><p>id kejiu 查看当前用户信息 ，用户组已改变</p></li></ul><blockquote><p>uid&#x3D;1002(kejiu) gid&#x3D;1003(<strong>haha</strong>) 组&#x3D;1003(<strong>haha</strong>)</p></blockquote><ul><li><p>将用户组改名为group1 命令： groupmod -n group1  group1</p></li><li><p>所有在wheel组 内 可执行超级权限  （&#x2F;ect&#x2F;sudoers 以下内容）</p><blockquote><p> Allows people in group wheel to run all commands</p><p>%wheel    ALL&#x3D;(ALL)    ALL</p></blockquote></li></ul><h3 id="文件属性与权限"><a href="#文件属性与权限" class="headerlink" title="文件属性与权限"></a>文件属性与权限</h3><table><thead><tr><th>文件类型</th><th>属主权限 u</th><th>属组权限 g</th><th>其他用户权限 o</th></tr></thead><tbody><tr><td>0</td><td>1  2   3</td><td>4  5  6</td><td>7  8  9</td></tr><tr><td><strong>d</strong></td><td><strong>rwx</strong></td><td><strong>r-x</strong></td><td><strong>r-x</strong></td></tr><tr><td>目录文件</td><td>读 写 执行</td><td>读 写 执行</td><td>读 写 执行</td></tr></tbody></table><h4 id="首位数字解释"><a href="#首位数字解释" class="headerlink" title="首位数字解释"></a>首位数字解释</h4><ol><li><p>0 表示文件类型</p></li><li><p>-代表文件</p></li><li><p>d代表目录</p></li><li><p>l链接文档（link file）</p></li></ol><h4 id="rwx解释"><a href="#rwx解释" class="headerlink" title="rwx解释"></a>rwx解释</h4><ol><li><p>r :可以读取 查看</p></li><li><p>w:可以写入 修改 删除</p></li><li><p>x:可以执行 进入</p></li></ol><h4 id="文件权限修改"><a href="#文件权限修改" class="headerlink" title="文件权限修改"></a>文件权限修改</h4><ol><li><p>chmod (u g o ) (+-&#x3D;) 文件或目录  (u:所有者 g:所有组 o:其他人 a 所有人)</p><p>给 ugo 全部赋予此文件rw权限</p><p><code>  chmod a=rw startup.sh</code></p></li><li><p>chmod [421] 文件目录  （r&#x3D;4 w&#x3D;2 x&#x3D;1） rwx&#x3D;4+2+1&#x3D;7  </p><p>给 ugo 全部赋予此文件rwx权限  </p><p> <code>chmod 777 startup.sh</code></p></li></ol><table><thead><tr><th>u</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>rwx</td><td>rwx</td><td>rwx</td></tr><tr><td>110</td><td>100</td><td>100</td></tr><tr><td>6</td><td>4</td><td>4</td></tr></tbody></table><blockquote><p>二进制表示 110 100 100</p></blockquote><p>3.修改整个文件夹下所有文件 ugo权限 都有可读可写可执行权限</p><p><code>chmod -R 777 home/ </code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 算法之二分查找</title>
      <link href="/2018/08/21/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/08/21/Java%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找-找某个数值"><a href="#二分查找-找某个数值" class="headerlink" title="二分查找 找某个数值"></a>二分查找 找某个数值</h2><h3 id="前提：数组已经排好序"><a href="#前提：数组已经排好序" class="headerlink" title="前提：数组已经排好序"></a>前提：数组已经排好序</h3><p>求该值所在数组中的位置</p><h4 id="二分查找实现步骤"><a href="#二分查找实现步骤" class="headerlink" title="二分查找实现步骤"></a>二分查找实现步骤</h4><p>1.需排好序的数组</p><p>2.定义左边界L,右边界R，确定搜索范围，循环执行二分查找（3，4步骤）</p><p>3.获取中间索引 M&#x3D;(L+R)&#x2F;2</p><p>4.中间索引的值 arr[M] 与待搜索值T 进行比较</p><ul><li><p>arr[M]&#x3D;T 表示已经找到</p></li><li><p>arr[M]&gt;T 表示中间值的右侧其他元素都大于T 无需比较，中间索引左边去找，M-1设置为右边界 ，重新查找</p></li><li><p>arr[M]&lt;T 表示中间值的左侧其他元素都小于T 无需比较，中间索引右边去找，M+1设置为左边界 ，重新查找</p></li></ul><p>5.当L&gt;R时 表示没有找到  跳出循环</p><p>代码实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> T)</span> &#123;</span><br><span class="line">    <span class="type">int</span> L=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> R= arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line"></span><br><span class="line">        M = (L + R) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[M] == T) &#123;</span><br><span class="line">            <span class="keyword">return</span> M;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[M] &gt; T) &#123;</span><br><span class="line">            R = M - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = M + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上算法个小问题，即当L R 数很大时，会出现数据溢出问题</p><p>如：</p><p>int R &#x3D;Interger.MAX_VALUE-1;</p><p>int L&#x3D;0;</p><p>M&#x3D;(R+L)&#x2F;2</p><p>当在右侧时</p><p>L&#x3D;M+1</p><p>M&#x3D;(L+R)&#x2F;2</p><blockquote><p>此时 M 溢出  为负数</p></blockquote><p>解决方法1：</p><p>（L+R)&#x2F;2 可转换为 ： L&#x2F;2+R&#x2F;2 &#x3D;&#x3D;&gt; L-L&#x2F;2+R&#x2F;2 &#x3D;&#x3D;&gt; L+（R&#x2F;2-L&#x2F;2）&#x3D;&#x3D;&gt;L+(R-L)&#x2F;2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> T)</span> &#123;</span><br><span class="line">    <span class="type">int</span> L=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> R= arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line"></span><br><span class="line">        M = L+(R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[M] == T) &#123;</span><br><span class="line">            <span class="keyword">return</span> M;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[M] &gt; T) &#123;</span><br><span class="line">            R = M - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = M + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法2：</p><p>（L+R)&#x2F;2 转换为无符号右移（&gt;&gt;&gt;） （L+R）&gt;&gt;&gt;1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> T)</span> &#123;</span><br><span class="line">    <span class="type">int</span> L=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> R= arr.length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line">    <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line"></span><br><span class="line">        M = (L+R)&gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[M] == T) &#123;</span><br><span class="line">            <span class="keyword">return</span> M;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[M] &gt; T) &#123;</span><br><span class="line">            R = M - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            L = M + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效率比较：位移运算效率更高</p><p>测试结果：</p><blockquote><p>8<br>8<br>StopWatch ‘’: running time &#x3D; 7100 ns</p><hr><h2 id="ns-Task-name"><a href="#ns-Task-name" class="headerlink" title="ns         %     Task name"></a>ns         %     Task name</h2><p>000004600  65%<br>000002500  35%   </p></blockquote><p>参考提示：</p><blockquote><p>可以参照JDK自带Arrays.binarySearch()方法里的算法实现</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 打印两时间段所有日期方法</title>
      <link href="/2018/08/10/%E3%80%90Java%E3%80%91%E6%89%93%E5%8D%B0%E4%B8%A4%E6%97%B6%E9%97%B4%E6%AE%B5%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/10/%E3%80%90Java%E3%80%91%E6%89%93%E5%8D%B0%E4%B8%A4%E6%97%B6%E9%97%B4%E6%AE%B5%E6%89%80%E6%9C%89%E6%97%A5%E6%9C%9F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="【Java】打印两时间段所有日期方法"><a href="#【Java】打印两时间段所有日期方法" class="headerlink" title="【Java】打印两时间段所有日期方法"></a>【Java】打印两时间段所有日期方法</h2><p><em>做Echarts图表统计时，需要用到近一周数据展示，X轴需用到两段时间日期时间显示</em></p><h4 id="打印两日期时间段中的所有日期显示"><a href="#打印两日期时间段中的所有日期显示" class="headerlink" title="打印两日期时间段中的所有日期显示"></a>打印两日期时间段中的所有日期显示</h4><p>1.首先使用传统Date与Calendar时间处理方式打印，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化输出 </span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2018-6-25&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">endDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2018-7-3&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">tmp</span> <span class="operator">=</span> startDate;</span><br><span class="line">            <span class="type">Calendar</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">            now.setTime(startDate);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; tmp.getTime() &lt; endDate.getTime(); i++) &#123;</span><br><span class="line">                tmp = now.getTime();</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;天：&quot;</span>+sdf.format(tmp));</span><br><span class="line">                now.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>第1天：2018-06-25<br>第2天：2018-06-26<br>第3天：2018-06-27<br>第4天：2018-06-28<br>第5天：2018-06-29<br>第6天：2018-06-30<br>第7天：2018-07-01<br>第8天：2018-07-02<br>第9天：2018-07-03</p></blockquote><p>2.第二种利用Java8的LocalDate类处理，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">startDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">25</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">endDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">between</span> <span class="operator">=</span> ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= between; i++) &#123;</span><br><span class="line">    System.out.println(startDate.plus(i,ChronoUnit.DAYS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行输出：</p><blockquote><p>2018-06-25<br>2018-06-26<br>2018-06-27<br>2018-06-28<br>2018-06-29<br>2018-06-30<br>2018-07-01<br>2018-07-02<br>2018-07-03</p></blockquote><p>3.基于以上 利用流式处理。 <a href="https://so.csdn.net/so/search?q=Stream&spm=1001.2101.3001.7020">Stream</a>.iterate(final T seed, final UnaryOperator f)</p><p>指定一个seed，生成从seed到常量f的流。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream.iterate(startDate, x -&gt; x.plusDays(<span class="number">1</span>)).limit(ChronoUnit.DAYS.between(startDate, endDate) + <span class="number">1</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>根据起始值当前日期，每次生成一个指定递增值（day+1）的天数，limit(n)用于截断流的长度，即只获取两天之差的天数值，打印输出。</p><blockquote><p>2018-06-25<br>2018-06-26<br>2018-06-27<br>2018-06-28<br>2018-06-29<br>2018-06-30<br>2018-07-01<br>2018-07-02<br>2018-07-03</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见问题(一)</title>
      <link href="/2018/07/14/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98(%E4%B8%80)/"/>
      <url>/2018/07/14/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常见问题之OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#Git常见问题之OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="Git常见问题之OpenSSL SSL_read: Connection was reset, errno 10054"></a>Git常见问题之OpenSSL SSL_read: Connection was reset, errno 10054</h2><p>今天git clone github项目时，出现此问题。经过网上查阅，这是服务器的<a href="https://so.csdn.net/so/search?q=SSL&spm=1001.2101.3001.7020">SSL</a>证书没有经过第三方机构的签署，导致报错。</p><p>可能由于github访问的网络问题，尝试了多次后 可以正常clone项目。</p><p>  <strong>如果多次请求不行</strong></p><p>可以尝试关闭SSL服务验证，git bash下执行以下命令后重新clone即可：</p><p><code>git config --global http.sslVerify &quot;false&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地文件上传远程仓库</title>
      <link href="/2018/07/10/Git%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2018/07/10/Git%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Git本地文件上传远程仓库"><a href="#Git本地文件上传远程仓库" class="headerlink" title="Git本地文件上传远程仓库"></a>Git本地文件上传远程仓库</h2><h4 id="本地新建文件项目推送至远程gitee-x2F-github仓库存放"><a href="#本地新建文件项目推送至远程gitee-x2F-github仓库存放" class="headerlink" title="本地新建文件项目推送至远程gitee&#x2F;github仓库存放"></a>本地新建文件项目推送至远程gitee&#x2F;github仓库存放</h4><p>1.在gitee创建初始化一个远程仓库，记下远程仓库地址如： <a href="https://gitee.com/xxxx/test01.git">https://gitee.com/xxxx/test01.git</a></p><p>2.在本地电脑新建一个文件夹test01,然后右键Git Bash Here*(前提安装好git环境)*  进入git命令窗口</p><p>本地项目初始化</p><p> <code>git init</code></p><p>3.绑定远程仓库地址</p><p><code>git remote add origin https://gitee.com/zhangkejiu/test01.git</code></p><p>git remote 查看当前远程仓库名称</p><p>git remote -v 查看远程仓库地址</p><p><img src="https://s2.loli.net/2022/08/17/MbZWwPmaSVFec4o.png" alt="image.png"></p><p>如上图，有两条地址fetch和push，fetch标识的是表示我们要拉取到的地址，push则表示我们要推送给远程仓库的地址。</p><p>（也可以在.git隐藏文件里的config文件里查看）</p><p>如下信息：</p><p><code>[remote &quot;origin&quot;]</code><br>    <code>url = https://gitee.com/zhangkejiu/test01.git</code><br>    <code>fetch = +refs/heads/*:refs/remotes/origin/*</code><br><code>[branch &quot;master&quot;]</code><br>    <code>remote = origin</code><br>    <code>merge = refs/heads/master</code></p><p><strong>若绑定地址错误，可通过一下命令解绑后，重新绑定</strong></p><p><code>git remote remove origin</code></p><p>4.在test01文件夹下准备新建一个test.txt文件，推送至远程仓库存储</p><p> 查看当前本地仓库状态：</p><p><code>git status</code></p><p><img src="https://s2.loli.net/2022/08/17/DacUSBeG9gxwirm.png" alt="image.png"></p><p>当前状态未添加至“暂存库”,需先使用 git add 命令添加至“暂存区” 。<a href="#git_workplace">Git存储区概念</a></p><p><code>git add  .   // . 添加当前目录下的所有文件到暂存区</code></p><p><code>git add filename1 filename2 .. //添加文件filename1,2..</code></p><p>此处我们将此文件下所有文件添加至暂存区</p><p><code>git add .</code></p><p>再查看当前状态 git status</p><p><img src="https://s2.loli.net/2022/08/17/jAoq3iBgz5RDrv7.png" alt="image.png"></p><p><strong>注</strong>： git rm –cached test.txt   删除暂存区文件，但保留工作区的文件。需重新git add 添加至暂存区</p><p>查看当前状态：</p><p><img src="https://s2.loli.net/2022/08/17/dyHUj8ukSQPiMWO.png" alt="image.png"></p><p>5.提交至版本库</p><p><code>git commit -m &quot;test 1&quot;</code> </p><p>-m 为提交信息 必填</p><p><img src="https://s2.loli.net/2022/08/17/WmeCQMHXqAshTxP.png" alt="image.png"></p><p>6.推送至远程仓库</p><p><code>git push --set-upstream origin master</code></p><p>首次推送需带 –set-upstream 参数与远程仓库建立连接，<strong>后可直接git push</strong></p><p>若出现以下显示，由于安全认证关闭警告问题，可再次尝试执行推送命令</p><p><img src="https://s2.loli.net/2022/08/17/UP8gXzLtSsHwBA9.png" alt="image.png"></p><p>或<strong>重新打开认证</strong></p><p><code>git config --global http.sslVerify true</code></p><p> 重新执行推送命令后，推送成功。检查远程仓库文件如下图：</p><p><img src="https://s2.loli.net/2022/08/17/ysRqarN7tSOG84L.png" alt="image.png"></p><hr><p><a id="git_workplace"></a> Git 工作区、暂存区和版本库概念：</p><ul><li><strong>工作区（Working Directory）：</strong>电脑里能看到的目录，可以直接编辑的地方。。</li><li><strong>暂存区（Stage&#x2F;Index）：</strong>数据暂时存放的区域。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库（commit History）：</strong>存放已经提交的数据。工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p>下图大致展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="https://s2.loli.net/2022/08/17/zB7abJCqsQi3oEf.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
